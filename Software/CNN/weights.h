#include "nnom.h"

/* Weights, bias and Q format */
#define TENSOR_CONV1D_KERNEL_0 {63, -37, 33, 23, -58, -16, 72, -28, 63, 38, 34, 90, -34, 50, 38, -71, 71, -18, -45, 18, -39, 2, 71, 50, -91, 98, -10, 46, 37, -2, -28, 37, 37, -31, 51, 75, 7, -12, -46, -59, 31, -21, -46, 6, 4, 27, 9, 33, -73, 59, 25, -50, 13, 82, 29, 65, 29, 64, 6, -76, 32, 43, -3, 12, 56, 78, -68, 56, 16, 43, 19, -32, -16, -8, 14, -43, 37, -35, -63, 57, 0, -40, 22, -55, -12, -8, -88, 19, 39, -46, -2, -26, 27, -35, -31, 58, -74, -98, -9, -32, -29, 0, -55, 2, 75, -58, -61, 34, -24, 57, -63, 0, -35, -86, 25, 67, -17, 80, -46, -64, 28, -19, 30, 65, -81, -54, -32, -85, -99, -53, 19, -26, 32, -88, -30, -40, 0, 42, -27, 65, -9, 51, 4, 48, 48, -61, -17, 46, 18, 87, 70, -3, 11, -52, -55, -29, -83, -5, -42, -65, -83, 67, -83, -54, -78, -74, -24, -75, -55, 2, 21, 28, -44, 6, 45, -89, 51, -58, -33, 80, 50, -41, -7, 59, -65, 51, -55, -42, 26, 42, -42, 19, 73, 3, -59, 51, -60, -72, 16, 45, -64, 71, 48, -89, 16, 13, 19, -45, 42, 16, -31, -8, -92, -67, 88, -42, 11, 11, 16, -56, -71, -44, -27, 18, -84, 34, 52, 31, 23, 7, -64, 46, 29, -47, -28, -81, 5, 80, -25, -15, 53, -67, 8, 40, -49, 37, -15, 5, 53, 41, -27, 24, -31, -21, 8, 20, -33, 83, 64, -70, 71, 48, -31, -59, 71, -4, 26, 61, 6, -89}

#define TENSOR_CONV1D_KERNEL_0_DEC_BITS {8}

#define TENSOR_CONV1D_BIAS_0 {65, 12, 86, -34, -15, 112, -8, 82, 58, 35, 98, 37, 10, 33, 99, -70, 36, 94, 89, 66, 53, 3, 56, 84, 90, 21, -72, 2, 76, 32}

#define TENSOR_CONV1D_BIAS_0_DEC_BITS {9}

#define CONV1D_BIAS_LSHIFT {3}

#define CONV1D_OUTPUT_RSHIFT {8}

#define TENSOR_CONV1D_1_KERNEL_0 {-30, 82, 85, 10, -41, 33, -31, 59, -27, 36, -40, -65, 33, -18, 56, 7, 56, -35, -62, 22, 27, 25, -19, 19, -8, 73, -29, -95, 22, 34, 9, -9, 65, 0, -73, -16, 70, 51, 69, 5, -8, -23, -40, -2, -32, -18, 48, 6, 26, -14, 3, -53, -23, 0, 33, 30, -57, -57, -58, -27, 0, 10, 14, -54, -19, -1, -45, -42, 41, 57, -30, -31, 14, 71, 99, -32, -48, -2, 88, -76, -44, 68, 65, 46, 15, -26, 10, -64, 31, 32, -19, -30, -6, 56, 40, 49, 74, 44, -31, 68, -72, -58, 81, 46, 49, 64, 31, -43, 57, -77, -21, 70, 29, 2, 75, 72, 83, 47, -20, 73, 3, -34, 30, 29, 2, 69, 14, 25, 63, -4, 37, 10, 17, 32, 10, 3, -15, 30, -30, 22, -12, -61, -24, 61, 98, 34, -42, 38, -35, 40, -74, -36, 4, -14, 48, 32, -32, 10, 85, 77, 86, 5, 33, -31, -10, -20, -83, 61, 63, -73, -81, -18, 88, 69, -29, 46, -32, -35, -59, -64, -33, 4, -51, -66, -35, 20, 31, -4, -43, 48, -12, -20, -23, 89, 105, -66, -58, 78, 0, -44, 43, -39, 37, -34, 68, 5, 48, 35, 9, 17, 9, -75, 47, 17, -42, 32, -84, -12, 65, 38, 79, -32, 40, 15, 105, -3, -39, 40, 52, 24, 70, -14, 40, 45, 28, -55, 21, -16, 77, 4, 84, -21, 66, -86, -68, 52, -34, 57, 42, -31, 95, 63, -7, 79, 71, -68, 28, 46, 27, 48, 39, 4, 40, 73, 5, -38, -26, 6, 63, 84, 81, -42, -58, -51, -17, 42, 4, 25, -46, -71, 63, 50, -83, 51, -9, -83, 45, -6, 22, 56, 43, 13, 11, -64, 46, 70, -30, 30, 20, -23, -75, -35, -92, -87, -64, -31, -39, -73, -12, 15, 8, 7, -54, 14, -35, 19, -95, -28, -61, -102, -62, -96, -60, -12, -106, -35, -35, 15, -58, 5, -70, -42, -33, -37, -49, -75, -56, -70, -92, 32, -44, -19, -62, 15, -86, 21, -16, -63, -38, -34, -35, 6, -79, -45, -104, -32, 28, -90, -93, -101, 9, 12, -77, -35, -77, -61, -31, -68, -47, -38, 26, -53, -10, 56, -15, -20, -3, -87, -65, -4, 34, 41, -59, -76, -82, 52, 41, 62, -47, 12, 76, -89, -92, 21, -25, 16, 22, -83, -34, -58, -51, -54, 10, 47, -48, -66, -16, -85, -88, -7, -7, -24, 23, 39, -44, 19, 55, 32, 15, -9, 25, -32, -45, -28, -25, -24, -58, -30, 66, 14, -9, -23, -72, 37, -25, 4, 24, -66, -5, 38, -53, -5, -19, -36, 30, -73, 22, 76, 76, -33, -16, 82, -17, 40, -7, -26, -43, 58, 25, -80, -65, 23, -90, -86, 43, 69, 43, 60, 42, -54, -16, -61, -42, 49, -52, -55, -88, -37, 21, -55, -6, 34, -81, -37, -24, -62, 21, -60, -3, -31, -32, -55, 82, 84, 50, -11, -2, -46, -43, -65, 68, -27, 43, 45, 87, 31, 63, -40, -39, 59, 3, -59, -22, -53, 6, -30, 60, 18, 49, 51, -19, -46, 55, 49, 61, -28, -13, -33, 45, -9, 46, 67, 64, 0, 72, 85, 28, -47, 28, 15, -46, 51, 76, -15, -20, -44, 0, -56, -8, -18, 7, 23, 47, 0, -28, -17, -75, 27, 57, -46, -70, -75, -53, -16, 47, -24, -74, -53, -20, 26, -49, -18, 30, -35, -20, -21, -63, -43, 28, 74, 45, -30, -5, -48, 45, 32, -6, 86, 26, -26, -14, -29, -63, 79, -2, 25, -85, 18, -35, -18, -20, -24, -8, -52, -3, 10, -64, -35, -9, -15, -20, 30, -86, 40, -23, -39, -43, 5, 9, -31, -43, 1, -82, -79, -2, 12, -1, -69, 24, -2, 20, 15, -55, -41, 18, -4, -45, 11, -93, -44, -52, -17, -76, -88, -17, 66, 19, -91, -51, -45, -68, -13, -77, 24, 2, -42, -51, 10, -46, 29, -38, 9, 53, 13, 9, 72, -28, -74, -15, -17, 71, 72, -87, -13, -4, 47, -12, -32, 22, 60, -47, -20, 29, -44, 30, -5, -1, 90, 62, -23, 15, 78, 82, -13, -16, 68, 45, -30, 37, -72, -12, 75, 39, -54, 34, 60, -6, 32, 18, 72, -46, -74, -57, 30, -46, 23, -78, 36, 7, -19, -63, 47, 87, -13, 24, 95, 53, -4, 24, -4, 83, -19, 53, -26, 110, 34, 31, 58, -19, -33, -52, 82, 76, -15, 74, 25, -22, 1, -12, 11, 42, 72, 34, -29, 82, 4, 1, 103, 12, 97, 21, 35, -7, 13, 72, -34, -34, -34, 86, 15, -72, 49, 35, 82, 72, 51, -82, 26, 2, 13, 44, -9, 7, 30, -36, -54, -22, -65, -51, 7, -63, -41, 19, -2, -29, -66, 65, 52, -56, 39, -1, 31, 89, 27, 69, 26, 80, -4, -25, 26, 5, -68, 28, -40, 43, 17, 79, -53, -19, 53, 27, -38, 88, 64, -38, -57, 14, -6, 8, 24, -34, 37, -13, -8, -61, 74, 45, 72, 42, 52, 9, 78, -27, 73, -26, 91, -11, 1, -17, -75, 13, 38, -15, -63, -55, 55, 37, 73, -2, 45, 69, -47, -23, 58, -19, -64, -62, 33, 31, -35, 26, 31, -35, 11, 48, -10, 43, 42, -19, -79, 57, 86, -21, -60, 11, -41, 89, 61, 0, 34, 64, -16, -3, -45, -7, -25, 45, 0, 9, 9}

#define TENSOR_CONV1D_1_KERNEL_0_DEC_BITS {8}

#define TENSOR_CONV1D_1_BIAS_0 {66, 13, 70, 72, 85, -80, -46, -40, -38, -2, -34, -19, 74, -22, 63}

#define TENSOR_CONV1D_1_BIAS_0_DEC_BITS {9}

#define CONV1D_1_BIAS_LSHIFT {3}

#define CONV1D_1_OUTPUT_RSHIFT {9}

#define TENSOR_LSTM_LSTM_CELL_KERNEL_0 {9, -20, 11, 42, 17, -5, 38, 29, 37, 33, 35, 60, -3, 50, -4, -18, 41, -12, -52, -25, 6, 37, -38, -6, -31, 21, -41, -10, -7, 3, -7, 9, 23, 19, 14, -45, -18, 17, -26, 9, -61, -38, -26, 40, -28, -39, 20, -6, 17, 30, 30, 2, 45, 53, 10, -8, 13, 9, 25, 22, 36, 15, 7, 41, 38, 51, 51, 8, 8, -19, 35, 4, 40, -34, -27, 29, 57, -15, -29, -61, 64, 19, -22, -39, -4, -8, 31, -36, 6, -11, -27, -32, -25, 38, 21, 38, 35, 32, 25, 4, -1, -58, 33, 43, 4, -36, -38, -7, -15, 5, 17, -8, -12, 11, 56, 22, 20, 10, -14, 22, -1, 23, 2, 23, 1, -5, -25, 26, -7, 45, -10, 7, 2, 37, 2, 31, 26, 8, -39, -2, 40, 12, -18, -12, -20, 3, -3, 26, 14, -23, 4, 3, -6, 38, 18, 9, 6, -38, 35, 32, -54, -48, 24, 33, -17, -25, -18, -6, 52, 17, 0, 30, 15, 30, -31, 32, -2, 25, -13, -27, 34, 44, 15, -6, 15, -26, 1, 23, 18, -8, -32, -5, -1, 31, -23, -5, 16, 46, 25, 3, 59, 21, 5, -36, -46, 16, -39, -27, -36, -39, 54, 29, -23, -30, 39, 17, -70, 46, 54, -18, 9, 34, 9, 13, -3, 11, 64, 20, 21, -8, -46, -24, 8, -5, -20, 37, -7, -3, 28, -14, 69, 43, -18, -15, -29, 40, 27, 17, -27, 30, -10, -24, 5, -22, 19, 33, 18, 22, -56, 12, -10, 39, 18, -51, 39, -17, -9, 3, 35, -34, -19, 22, -4, -15, 31, 11, -7, 1, -36, 11, 1, -1, 22, 35, 19, 45, 19, -25, 16, -32, -24, 0, 10, 27, 36, -42, -25, 13, -11, 59, -9, 18, -47, -42, -29, 9, -54, -6, 30, -21, 19, -50, -50, 20, -51, 32, -41, 22, 27, -31, 11, 29, 28, 38, -21, 44, 24, -26, 13, 2, 13, -57, 5, -19, 35, -28, -15, 46, -25, -12, 13, 37, 16, -21, 12, -46, -22, -49, -6, -3, -49, -6, -40, -30, -10, 44, -3, 50, 30, 20, -2, -52, -22, 24, 24, 8, 3, -34, -19, 37, -10, 1, -37, 9, 19, 36, 31, -46, -6, 12, 20, 40, 25, -46, -18, -3, 37, 42, 40, -47, -22, 32, 21, 23, 31, 26, -8, -35, -8, -44, -5, 16, 50, 47, 12, 16, 12, -3, -17, 2, 30, 10, -3, -40, 38, -7, 44, 7, -18, 36, 17, 13, 41, 35, -1, 35, -25, -12, 1, -10, -14, -45, 53, 33, 4, 38, -37, -43, -26, -31, 33, 21, -30, -11, -13, 5, -17, -10, -3, -4, -28, -29, 39, 7, -8, -42, 14, -8, 26, 24, -21, -4, -48, 7, -46, 9, 61, 49, 36, 26, -21, 38, 61, 58, -15, -14, -52, 11, 12, 16, 19, -5, 42, 47, 31, -40, 4, 58, 22, 12, -16, 14, 49, 27, 20, 11, 54, 61, -31, 6, 21, 64, -67, -38, -55, 6, -12, -7, -56, -17, 25, -7, 21, 46, 28, -9, -24, 7, 29, -26, 6, -41, -15, 36, -13, -48, -5, -4, 44, 64, 27, 50, 15, 39, -42, 24, 64, -13, 27, -1, -2, 60, 1, 42, 32, -24, -17, 55, -19, 13, 66, 22, 6, 2, 47, 24, 53, 7, -11, -60, 17, 25, -59, -57, 12, -3, -28, -12, -34, 6, -12, 35, -3, 3, 35, -51, 41, 13, 51, -26, 0, -25, -1, 48, -50, -24, -20, 47, 54, 2, 27, 53, -10, 67, 60, 40, 22, 4, 69, 26}

#define TENSOR_LSTM_LSTM_CELL_KERNEL_0_DEC_BITS {7}

#define TENSOR_LSTM_LSTM_CELL_RECURRENT_KERNEL_0 {2, 37, -15, -12, -29, 17, -12, 11, -34, -23, 18, 6, -2, -30, 57, 46, 10, 36, -11, 35, 24, 14, 26, 18, -22, -6, 10, 47, 17, 22, 17, 34, -4, -48, 54, -2, -12, -42, 35, -13, -58, 24, -36, 16, -26, 3, -10, 51, 19, -57, 37, -26, -54, -25, 23, 17, 16, 16, -3, 8, 23, 14, -6, -10, 31, -26, -27, 36, -13, -14, 21, 15, -17, -23, 36, -5, -22, -10, -34, -17, -4, -1, -18, -34, 2, -28, -7, -34, -17, -34, -16, 29, -25, -37, 11, -27, 22, 17, 23, -24, 32, -4, -9, -16, 9, 1, 25, 12, 7, 49, 15, 5, -23, -6, 9, -12, -43, -6, -9, 11, -7, 11, 27, 14, 33, -18, -35, 14, -34, -8, -19, 27, -34, -9, 9, 16, 15, 35, 11, 21, 26, 9, 34, 21, 44, 20, -2, 18, 30, 0, 23, 31, -47, -36, 13, 5, 39, 0, -48, 47, 8, -24, -1, -14, -3, -5, 1, -24, -1, -67, 18, 26, -10, 0, 28, 20, -13, 18, -30, -12, 80, 34, -10, 22, 20, 10, 4, -41, 23, -35, -40, -18, -11, 13, 2, 9, 17, 29, 14, 22, -6, -3, 12, -9, -6, 5, 47, -27, -28, -8, 2, -33, -25, -41, 16, -3, 5, 42, 18, -5, -7, -25, 49, -31, -57, -19, 4, -4, 5, -10, 21, -6, -35, -24, -51, 24, 1, 56, 26, 24, 10, 26, 36, -7, 13, 16, 28, -42, 25, 5, -31, -20, 23, 15, 27, 25, -8, 3, 29, -10, 21, -51, 20, 5, 6, 8, -38, -23, 2, -38, -36, 30, -7, -31, 3, -1, 9, 16, 25, -22, -14, -16, -40, -7, -24, 56, -11, -10, -3, 37, 42, 14, -21, -32, -10, -7, -12, 7, 47, -9, 44, 60, 28, 42, -19, 3, -8, 31, -30, -24, 35, 45, 19, -50, 10, 28, -17, 4, -10, 30, 4, -9, -15, -11, 25, 29, 7, -31, -21, -11, -5, 8, -16, -29, -18, 21, 25, 56, 30, 37, 4, 12, 41, -9, -1, -6, -27, 31, -32, -24, -13, -10, -19, 14, -2, -31, -37, -3, -25, -31, 29, 22, -2, -14, 21, -21, -29, -38, -37, -31, 10, 61, -33, -4, 16, -1, 46, 7, -2, 4, 50, 21, 61, 32, 25, -16, -22, 19, 17, 12, 14, -12, 10, -37, 10, -3, 0, 22, 13, -29}

#define TENSOR_LSTM_LSTM_CELL_RECURRENT_KERNEL_0_DEC_BITS {7}

#define TENSOR_LSTM_LSTM_CELL_BIAS_0 {6, 7, 8, 7, 7, 8, 7, 9, 7, 6, 67, 72, 70, 71, 72, 72, 72, 74, 71, 71, 4, 3, 3, 3, -8, -7, -6, 6, -2, -4, 8, 9, 9, 9, 11, 8, 10, 11, 9, 9}

#define TENSOR_LSTM_LSTM_CELL_BIAS_0_DEC_BITS {6}

#define LSTM_BIAS_LSHIFT {4}

#define LSTM_OUTPUT_RSHIFT {3}

#define TENSOR_DENSE_KERNEL_0 {-17, 28, -46, 37, -44, 1, 11, 55, 21, 33, 19, -56, 3, 57, 23, -31, 52, 1, -51, -34, 27, -22, 6, 29, -32, 28, 12, 55, -33, 5, 37, -4, -38, -5, 11, 51, -29, -41, -8, 22, -42, -39, -64, 72, -54, -34, 50, 51, 0, 1, 20, 6, 26, 63, 17, -1, 14, -25, 54, -73, 62, -24, -64, -46, -23, -83, -46, -54, 39, 11, -42, -63, -11, 34, -4, -38, -32, 5, 12, -20, 66, 23, 3, 31, -15, 17, -9, 41, -33, 78, -49, -29, 66, 45, 57, 23, 8, 44, -40, -16, 32, -50, 37, 25, 26, -64, 14, -1, -33, 4, -33, -44, 8, -30, 54, -42, -8, -10, -60, -50, -15, -42, -7, 62, -37, -23, 63, 46, -55, 53, 33, 14, 33, 51, 47, -1, -65, -23, 61, -61, 42, 7, 3, -21, 6, 51, -36, -9, 1, 29, -32, -20, 23, -6, -60, 5, -2, -18, -21, 27, 44, 5, -11, 12, -2, 19, 10, 39, -51, 34, -13, 2, 3, 46, -3, 4, 13, 16, -1, 49, 6, -22, 39, 42, 19, 11, -14, -29, -25, -43, -16, -52, -30, -40, 45, -19, 37, 26, -58, 13, -54, 2, -51, 51, -35, 26, 36, 17, -36, 14, -16, -11, 19, -15, 39, 11, -28, -9, 58, -2, -2, 1, -59, -16, -64, 46, -34, -42, 8, 50, -5, -20, 41, -42, -67, 33, 2, -36, 9, 22, 28, -4, -45, 51, -48, 2, -18, -16, 3, 39, 24, 30, 24, 14, -50, 50, -35, -32, 8, 40, 6, -6, 25, 66, 14, -58, 23, -9, -48, -59, 14, -18, -30, 0, 43, -43, -31, 14, -35, -23, -17, 8, -26, 49, -4, 7, 9, 55, -16, -11, -27, 34, -49, 24, 9, 13, 6, 8, 13, -37, -58, 51, -26, 8, -65, -5, -36, 12, -40, 23, -4, 8, 23, -46, -41, 18, 22, -55, 11, 38, 40, 11, -7, 43, 46, -3, -7, -21, 43, 41, -29, 48, 13, 40, -60, -34, -6, 42, -17, 30, 34, 26, -58, 68, -4, -38, 48, -10, -15, -37, 35, -17, -31, -3, 38, -50, -13, -46, 26, -29, -79, 16, 29, 52, -25, -18, -19, 13, 48, -2, 35, -3, -39, -3, 13, 1, -3, 8, 8, 7, -38, -41, -15, -23, -39, 25, -32, -17, -51, 61, -59, -60, -1, -8, -30, 14, 9, 16, -33, 7, 46, 5, 24, 37, 43, -13, -6, -5, 47, 22, 1, -17, -40, 29, -35, -10, 12, 52, -42, 26, 24, 40, -40, 37, -38, -14, 37, 1, 36, 33, 15, 57, -2, -18, 12, -8, 7, -15, 57, -11, -4, 47, 39, -21, -6, 4, -11, 63, -3, -8, 3, 29, 16, 3, -6, 5, -27, -79, 17, -6, -33, -41, 49, -10, 5, 14, -18, -21, 2, -29, -15, -64, 26, -8, -14, 3, 6, 47, -69, -59, 22, -5, 60, -31, 14, -8, 13, 8, 46, -10, -11, -72, -41, 50, -44, -65, 72, 78, -4, 63, 12, 38, -64, -14, 39, 17, -3, -68, -3, 44, 11, 4, -36, -24, 74, 14, 2, -12, 20, 8, -20, 51, 19, -13, -14, -56, -34, 81, 5, -2, 68, 26, -24, 16, -10, 16, -26, -15, 21, 40, -47, -26, 5, 31, -51, -11, -13, -19, -28, 10, -7, -59, 46, -40, -11, 68, 12, 24, -67, -17, 51, -27, 27, -46, -2, -9, -24, 8, 42, 30, -21, -67, -31, 57, -2, -61, 64, 70, -3, 14, 35, -31, 10, -16, 33, 14, 30, -16, -1, 21, 24, -53, -5, -24, 77, 20, 24, -39, 20, -7, -68, 25, 2, -12, -24, 48, -25, -22, 74, -63, 24, 70, 18, -16, 34, 20, -32, -63, 2, 45, 7, 36, 8, 42, -74, 4, -24, 5, -18, -7, -61, 5, 38, -3, -39, 41, 17, -2, -40, 27, 20, 51, 41, -40, 24, -42, 21, -32, 63, 37, -9, -65, -13, -69, -9, -5, 21, 3, -4, -5, -30, -12, 29, -2, -40, 7, -7, -53, 20, 66, 25, -46, -20, -8, 14, 32, -45, 24, -3, -14, -28, 39, 66, 14, -34, 52, 55, -35, 39, -28, -22, -11, 36, -29, 9, -8, -73, 0, -46, 8, 22, 8, -29, 15, 8, -41, 1, -38, 30, 12, -30, 60, -4, 2, 1, 30, 4, -49, -5, 65, 69, 18, 4, -25, -21, -11, -1, -43, 37, 44, -68, -21, 48, -23, 66, 17, 9, 45, 35, 16, -6, -15, 14, 0, -56, -21, 25, 2, -72, 14, -23, -2, -29, 9, 37, 60, -73, 25, -39, -47, -54, -38, 64, 62, 9, 3, 49, -28, 5, -59, -6, 27, 6, -40, -27, -78, -59, -57, -36, 30, 28, 27, -63, 9, 32, -32, -55, 10, 10, 32, -52, 30, 13, -22, -33, -8, 31, -30, -49, 2, 41, 30, 19, -27, -70, -41, 27, -28, 12, 7, -53, -6, 54, -25, 10, 1, -41, 23, -8, -54, -6, -37, 50, 32, -28, 25, 5, -67, -52, 62, 17, -26, -21, 53, 12, -2, -6, 7, -6, -31, -53, -7, 29, -18, -30, 14, 9, -12, 30, -55, -36, 0, 28, -30, -36, -72, -45, 0, -52, 15, 47, 1, -71, 14, 19, -62, -33, -12, 56, 57, -70, 50, -20, -65, -48, -56, -25, -61, 31, 9, 31, 67, 25, -22, -10, -27, 64, 4, 11, 29, 40, -19, 21, -59, 51, 66, -9, 9, 0, -6, -22, -69, 55, 35, -13, 21, -32, -69, -29, -28, 6, -47, -37, -42, 4, 80, -63, 59, -34, -23, -57, -16, 62, -5, 65, 51, 30, -17, 11, -24, -14, -4, 72, 26, 13, -54, -23, -71, -50, 6, 81, 39, -78, -10, 36, -11, -50, -46, 62, 10, -72, 53, 0, -36, -19, -84, 6, 8, 41, -7, 17, 70, 11, -47, -20, -59, -2, 24, 15, 21, 47, -51, 45, -30, 7, 18, -30, 22, 0, -9, -3, -65, 16, -16, -1, 5, -27, -31, -72, -11, -21, -9, -30, 29, -88, 56, -51, -18, 50, -40, -31, -14, 59, 73, -22, -39, 20, -2, 103, 12, -68, -38, 33, 37, -29, 42, 29, -35, 21, -19, 41, -53, 31, 13, -45, -58, 30, 33, -3, -6, 37, -42, -42, -12, -28, 1, -61, -7, -28, -31, -20, -14, 27, 4, -40, 55, 3, 13, 82, -32, 29, -58, 67, 41, 29, -45, 7, 21, -9, -74, 12, 22, -14, 0, 28, -5, 0, 9, -26, 41, -13, 48, 57, -23, 18, 32, 8, 25, -50, -13, 47, -14, 6, -10, 25, -26, 4, 6, 53, 5, -5, 50, -9, -9, -27, -7, -5, -20, -29, 27, 37, -24, -30, 43, -28, -16, -6, -3, 28, -46, 30, 20, 10, 58, 28, -16, -2, -6, 30, -3, 55, 31, 39, -63, -5, -24, 42, 54, 7, -59, 24, -44, 23, 14, 28, -18, -41, 33, -17, 3, -49, -36, 39, -24, -31, 16, -7, 48, 34, 4, 3, -11, 18, -22, 16, -18, 44, 14, -20, -20, -40, 28, 67, -30, 32, -55, 60, 57, 68, -8, -26, 53, 11, 7, -34, 0, -2, -12, -35, -38, 26, 31, -30, 16, -4, 10, 23, -55, -13, -4, 42, -4, -45, 34, -23, 22, -7, -53, -14, -37, -21, 47, -12, -19, -29, -13, 72, 12, 45, 3, 32, -19, 35, 9, 23, 0, 1, 37, -68, -13, -53, -59, 30, 23, -1, 9, -13, 15, 19, -21, -5, -5, 31, -20, -8, 11, 31, -3, -1, 27, -36, -9, 56, 9, 38, 5, 32, -31, 13, 7, -39, 37, 52, 44, -64, 2, -12, -19, 9, -40, 43, 29, 2, -28, -70, 33, -13, -15, 58, 0, 7, 25, -31, 58, -60, 0, -44, -51, 9, -14, -28, -33, 32, -67, -5, 31, -10, 50, 42, 7, -42, -34, -28, -27, 1, -17, 29, 16, -13, 55, -53, -10, 1, 3, 29, -46, 22, -26, -35, 4, -5, -34, 35, -13, 35, -46, -24, 18, 41, 10, -67, 45, 16, -51, 10, 4, -15, -41, -37, 10, 44, 16, -60, -25, -1, 0, -91, -23, -65, 7, -11, -26, 22, 11, 4, 8, -34, 16, -4, 47, -26, -49, -5, -20, 9, -10, 31, -17, 1, 26, 32, -60, 6, -17, -25, 67, -33, -42, 30, -29, -48, 33, -26, 15, 20, 6, 49, -11, 28, 3, -27, 30, 29, 2, -48, -52, 34, 1, -20, -59, 13, 63, -53, 31, -13, -13, -66, -4, -35, 30, -3, -10, -41, 12, 5, -17, -14, -51, -6, -4, 42, -7, -33, 12, 6, 23, -21, -34, -43, -10, -25, -57, -11, 14, 30, 47, -27, 15, 46, 46, -1, -7, 6, -53, 10, -23, 45, 24, -22, -14, -8, -8, -39, 17, -36, 25, -64, -13, 5, -16, -92, -13, 1, -42, -5, -16, 67, -6, 15, 27, -1, 54, 24, -7, -7, -3, 2, -15, 9, 18, 63, 8, -9, -26, -6, -58, -34, -42, -41, -1, 33, -50, -8, 11, -34, -57, -13, -39, -38, 26, 33, 9, -8, -27, -24, 54, -84, 1, -6, 55, -12, -19, -26, 20, 49, -40, -12, -46, 24, 32, 24, -59, -2, 14, 48, -58, 2, 25, -8, 5, 11, -21, 7, -50, 4, 60, 1, -2, -46, -19, -69, -63, 12, 23, -23, 0, 10, 34, 44, 6, 5, 19, -24, 22, -53, 43, 22, 30, -28, 20, 55, 65, 8, -19, -15, 19, 3, -20, 8, 51, -20, 12, -41, -42, -34, -62, 10, 40, -38, -58, 37, 36, 49, -25, 43, 16, -60, -63, -10, 0, 30, -5, 3, 67, 55, -55, 22, 2, -63, 17, 12, -29, -12, 27, 12, -48, 38, 46, -21, -44, 4, 57, -16, -22, -43, 12, 56, -21, 8, 35, 24, -63, 10, 39, 17, -45, 25, 47, 33, -31, -3, -12, -52, 22, -35, 40, -24, 46, -28, 63, -43, 57, 12, -3, 13, 37, 0, -29, -55, 64, 19, -51, 3, 47, -11, -16, 28, 72, 70, 9, -10, 42, 10, 6, -17, 2, -26, -42, -23, 72, -7, -44, 9, 47, 6, -83, 38, -34, -38, -21, 60, -7, -1, 48, 39, -46, -62, 12, -19, -55, -47, 19, 48, -57, -17, 74, 32, -2, 21, 38, 19, 37, 56, 29, 27, 30, -47, 35, -33, -26, -17, 13, -7, 24, -25, 60, -40, -11, 58, 25, -18, 74, 32, -3, 8, 5, 27, 4, -32, 58, 7, -51, -13, 41, 0, -12, -19, 12, 8, -1, -49, -17, -7, 36, -14, 53, 8, 40, -3, 52, 21, 27, -12, 67, 21, -58, 12, 0, 3, 27, 44, 16, -39, -64, 4, -71, 2, 7, 14, -36, -2, -23, 19, -17, 43, 22, 4, 41, 16, -16, 9, 10, -5, 67, 33, -27, -51, -39, 5, -1, -42, 55, 69, -48, -56, 21, -37, -31, -36, 61, -26, 33, 13, 9, -52, -28, 14, 1, 28, 49, 42, 3, -3, 18, 49, -26, -75, 39, 30, 2, -34, 17, -26, 20, -75, -34, 8, 44, -15, 20, 63, 40, -63, 41, -17, 5, 21, 43, 65, -30, -48, 22, -44, -15, 11, 39, -13, -10, 62, 10, -69, -1, 78, 18, 25, 17, -72, 59, 15, -30, 10, 38, -54, 33, -13, 39, -61, -36, -27, -7, 24, -5, 22, 3, -65, 18, -34, -48, -36, 20, 19, 0, 10, 30, -78, -33, -61, -9, 4, 28, 24, -23, 34, -21, 60, -53, -61, 20, 19, 54, -12, -46, -26, 70, 24, 17, 4, -3, -43, 0, -32, -16, -72, 49, -30, 46, 38, 61, 55, -51, -84, -6, -65, 5, 59, -18, 46, 12, 57, -18, -3, -65, 77, 64, 14, 70, -7, 15, 38, -40, -18, 24, -69, 14, -1, -1, -38, -9, -37, 45, 71, 16, 25, -62, 9, 35, -59, -17, 12, 10, 87, 37, 61, 58, -15, -25, -51, -32, -24, 33, 65, 29, 67, 18, 5, -67, -5, 12, 64, 14, -11, -41, -37, 30, 79, 38, 4, 12, 23, -21, -7, 33, 21, 49, 1, 12, 30, -4, 23, -23, -38, -40, -29, -44, 65, 2, 11, -44, -14, 66, -24, 11, 41, 26, -62, -58, -60, 12, -33, -30, 22, 18, -4, 68, 2, 17, -60, 9, 22, 6, -62, -32, 9, 45, -33, 21, -33, -18, 23, -48, -9, -58, 66, 47, 11, 14, 53, -7, -3, 7, 26, 1, -15, -50, 54, 49, 6, 35, -47, -22, -68, -12, -40, 50, -33, 11, 65, 10, 26, 31, 13, 48, 68, -22, 12, -35, 58, 29, 47, 21, 60, 27, -79, -7, 6, 26, -18, -18, 69, 48, 55, 17, 5, -61, -2, -29, -34, -28, 5, -49, -17, 3, -5, -12, 23, -7, -65, -64, -40, -30, -11, -40, 50, 7, 13, 13, -44, -65, 9, -9, -31, -67, 49, 29, 12, -59, 32, -1, 18, -41, 14, 15, 1, -58, 44, 18, -24, -24, 3, -15, -57, 8, 2, -8, -48, -44, 19, 42, 4, 8, -18, 12, 14, 13, -25, -50, 24, 14, 51, -48, 29, 26, -9, -16, -64, 51, -58, 4, 36, 23, 26, -21, -58, -19, -20, -5, 17, -20, -38, -50, -38, 22, 14, -43, 32, -16, 2, -19, -62, -42, -22, -69, -1, 18, 27, 64, -3, 9, -13, 19, -2, -36, 39, 60, 6, -34, 10, 56, 33, 23, -2, 45, -6, -7, 10, 9, 19, -21, -4, -3, 29, -49, -7, 30, -54, -70, -4, 15, 32, 6, 24, -23, 9, 14, -52, 2, -18, 12, 12, -24, 24, 45, 14, -61, -32, 26, -35, -40, 49, -8, 20, -35, 10, -9, -33, 19, 64, -43, -60, 5, 25, 22, 1, -8, -8, 16, 26, -5, -45, -32, 8, -48, 60, 8, 51, 50, -13, -7, -25, 15, -58, -27, 22, 49, 9, -37, 32, -9, 22, 41, -12, -10, 2, -54, 28, -49, 18, 6, 28, -23, 29, -53, 61, -34, -55, -66, -9, 53, 35, 51, -15, 26, -50, 4, -57, -2, -17, 56, 52, 7, 35, 20, 1, -28, -8, 58, -24, -24, 54, -46, 25, -46, 14, 49, -15, -2, 11, 22, -9, -39, 7, 1, 31, 9, 50, -20, -9, -5, -4, -10, 5, -39, 50, 0, 7, -11, 12, 17, 14, 41, -57, 17, 13, 30, 16, -29, 46, -4, 16, -26, -35, 0, 18, -30, -12, -55, 2, 51, 34, 16, -17, 10, 23, 47, -4, 11, 0, 7, 30, -34, 9, 10, -10, -52, -20, 16, -36, 47, 52, -37, 18, -4, -15, 51, -51, 17, -22, 14, 52, -39, 35, -15, 22, 50, -25, -57, 13, 73, -2, -11, 7, 12, -26, 13, 3, -25, 3, -7, 10, -14, -40, -34, 55, 8, -35, 5, 44, 28, 9, -13, -12, 12, -37, 56, 47, 1, 46, -41, -22, -3, -61, 20, 51, -1, 15, -27, -35, 60, 30, 73, 36, 3, 37, 56, -24, 26, -9, 39, -20, 11, 46, -4, -22, 0, -4, 13, -14, -28, 55, 13, 50, -26, 36, -18, -63, 17, -59, 43, 2, 0, 45, -30, 57, 49, -16, -48, -30, 73, 37, 37, 4, 32, -17, 37, 20, -23, -15, -7, 26, 16, -55, 17, -12, 4, -42, 11, -17, 12, 17, -24, -66, 21, -37, -31, -16, -14, 66, -9, -38, 0, -21, 47, 37, 0, 17, -28, 5, 30, 43, 51, -13, -1, -17, 25, -71, 30, -24, -49, -6, -25, 31, -28, 33, -56, 27, -3, -10, -10, 11, 8, 47, -38, 21, 19, 0, 66, -35, 21, 0, -7, -32, -43, 59, 58, 6, -11, -27, 16, -9, 64, 18, -34, -8, -18, -40, -46, -12, 40, -10, -8, -49, -37, 7, -45, -13, -54, -45, 39, 9, 30, -52, 37, 20, -55, -29, 2, 9, -8, 35, -5, 34, 34, -5, 33, -30, -56, -20, -65, 11, 54, -43, -8, -38, -17, 14, -28, 43, -56, -15, 10, -59, -15, 1, 53, 38, -6, -8, -52, 2, -40, 61, -13, -54, 25, -5, -1, -14, 40, -5, -46, -49, -26, -17, 3, 47, -1, 20, -5, -27, 49, 8, -28, -35, -52, -34, 32, -47, -9, -6, -39, 37, -53, 19, -35, -50, -14, 6, 8, 44, 6, 7, -28, -8, -18, -32, -2, 16, 28, 24, -7, 40, 20, -17, 45, -12, -60, -8, 10, -53, 26, -61, 20, 25, -2, -25, -64, 29, -12, -33, 13, -18, 36, 2, 27, 55, -3, 38, -2, -55, -59, 38, 45, -47, 4, 58, 19, 33, 26, 12, -55, -14, -16, -41, 32, 32, 35, -39, -21, 12, 69, 20, -46, -7, -21, 9, 8, -54, 45, 43, -6, -1, -19, -25, -9, 0, -18, -64, -13, 5, 50, 17, -25, -9, -56, -32, 20, 24, 70, 45, 37, 52, 52, -9, 47, -18, -59, -50, -30, -14, 52, -44, -25, -15, 19, 17, -61, -1, -65, 1, -14, -51, 12, 18, -10, 22, -61, 34, -35, -18, -30, 41, 27, -11, 10, -3, 37, -1, 37, 3, -19, -31, -20, -33, 4, 10, 31, 1, -12, 8, 10, -6, 0, 25, -20, -32, -10, -48, -14, 19, 14, 6, -14, -7, 16, 33, -53, -61, 20, 30, 58, 18, -2, 57, -12, -36, 17, -5, 44, -11, -2, 63, 12, -60, 44, -50, -44, -18, -46, -18, 34, -53, 19, -9, -21, 5, 29, 43, -13, -2, 6, -12, -8, 12, -4, -15, -10, 30, -8, -49, -58, -1, -19, -15, -48, 46, -6, -16, 21, -20, -5, 12, 39, -46, 35, -19, 14, -26, 38, -56, 67, 39, 8, -27, -26, 8, -9, -16, -13, 28, 27, -48, -6, -4, -17, -15, -40, -40, -47, 15, -4, 30, -16, 15, 21, -46, 10, -21, -53, 27, 5, 67, 44, -41, 6, 10, -12, -9, 1, 15, 5, -46, -11, 47, 6, 4, 53, -6, 13, -8, -67, -28, -49, -20, 42, 33, -20, 24, -42, 12, -28, 10, -13, -64, 21, 28, 41, 30, 7, -54, -17, -20, -6, -37, 54, -21, -9, -13, 13, -29, 5, 43, -7, -5, 33, -31, -13, -43, -21, 11, 12, 16, 56, 2, -42, -14, -22, -57, -28, -6, -8, -16, 57, 55, 8, -57, 15, 35, 14, -42, -4, 60, -73, -73, -73, 2, 54, -45, 17, 59, 64, 45, -44, -46, -22, -27, 6, -69, 34, -11, 47, -14, 14, -50, 20, 15, 28, -44, 43, 13, -33, 45, 16, -14, -6, -6, -7, 7, 56, 20, -24, 28, -26, -3, -14, -20, -38, 9, 22, -7, -3, 24, -3, -21, -35, -19, -24, -1, 50, -9, 0, -1, 42, -18, -4, -5, -33, -49, 37, -2, -38, -7, -8, -12, -12, -45, 10, -6, 4, 36, 46, -13, -7, -29, 50, -35, -61, 9, 60, 61, -16, 16, 8, -23, 6, -57, -57, 4, 35, -10, -4, -21, 1, 21, 28, -57, -17, 23, 11, 21, -44, -15, 35, 12, 68, -50, -17, -13, 81, -21, -57, 8, -32, -26, 75, 14, -59, -26, 26, -33, -63, 2, -44, -51, 10, -51, -54, -17, 83, -15, -60, 5, -6, -43, 26, -3, -31, -43, 41, -40, -3, 14, -46, -37, 51, -5, 5, -18, 18, -2, -9, -14, -49, -3, 13, -17, -12, -22, 79, -32, -5, 35, -30, 21, 22, 10, -6, -12, 83, 8, -23, 31, 25, 5, 47, -49, -51, -70, 31, 24, -15, -24, -17, -47, -17, -14, -44, -34, 76, -40, -18, -10, 19, -57, -7, -51, -9, -50, 83, -19, 14, 7, 18, -17, 16, -2, -42, -22, 67, 30, 37, 5, -32, -37, 5, -52, -25, 9, 60, 25, -2, -25, -63, -67, 59, -71, 19, 6, 34, 20, 25, 8, -25, -23, 59, -38, -15, -31, -7, 56, 3}

#define TENSOR_DENSE_KERNEL_0_DEC_BITS {8}

#define TENSOR_DENSE_BIAS_0 {36, 12, 37, -23, -1, -22, -40, -52, -15, -55, -77, -58, 121}

#define TENSOR_DENSE_BIAS_0_DEC_BITS {10}

#define DENSE_BIAS_LSHIFT {5}

#define DENSE_OUTPUT_RSHIFT {12}


/* output q format for each layer */
#define INPUT_1_OUTPUT_DEC 4
#define INPUT_1_OUTPUT_OFFSET 0
#define CONV1D_OUTPUT_DEC 4
#define CONV1D_OUTPUT_OFFSET 0
#define LEAKY_RE_LU_OUTPUT_DEC 4
#define LEAKY_RE_LU_OUTPUT_OFFSET 0
#define CONV1D_1_OUTPUT_DEC 3
#define CONV1D_1_OUTPUT_OFFSET 0
#define LEAKY_RE_LU_1_OUTPUT_DEC 3
#define LEAKY_RE_LU_1_OUTPUT_OFFSET 0
#define LSTM_OUTPUT_DEC 7
#define LSTM_OUTPUT_OFFSET 0
#define FLATTEN_OUTPUT_DEC 7
#define FLATTEN_OUTPUT_OFFSET 0
#define DENSE_OUTPUT_DEC 3
#define DENSE_OUTPUT_OFFSET 0
#define SOFTMAX_OUTPUT_DEC 7
#define SOFTMAX_OUTPUT_OFFSET 0

/* bias shift and output shift for none-weighted layer */

/* tensors and configurations for each layer */
static int8_t nnom_input_data[450] = {0};

const nnom_shape_data_t tensor_input_1_dim[] = {150, 3};
const nnom_qformat_param_t tensor_input_1_dec[] = {4};
const nnom_qformat_param_t tensor_input_1_offset[] = {0};
const nnom_tensor_t tensor_input_1 = {
    .p_data = (void*)nnom_input_data,
    .dim = (nnom_shape_data_t*)tensor_input_1_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_input_1_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_input_1_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};

const nnom_io_config_t input_1_config = {
    .super = {.name = "input_1"},
    .tensor = (nnom_tensor_t*)&tensor_input_1
};
const int8_t tensor_conv1d_kernel_0_data[] = TENSOR_CONV1D_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_kernel_0_dim[] = {3, 3, 30};
const nnom_qformat_param_t tensor_conv1d_kernel_0_dec[] = TENSOR_CONV1D_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_kernel_0 = {
    .p_data = (void*)tensor_conv1d_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_bias_0_data[] = TENSOR_CONV1D_BIAS_0;

const nnom_shape_data_t tensor_conv1d_bias_0_dim[] = {30};
const nnom_qformat_param_t tensor_conv1d_bias_0_dec[] = TENSOR_CONV1D_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_bias_0 = {
    .p_data = (void*)tensor_conv1d_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_output_shift[] = CONV1D_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_bias_shift[] = CONV1D_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_config = {
    .super = {.name = "conv1d"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_bias_shift, 
    .filter_size = 30,
    .kernel_size = {3},
    .stride_size = {3},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_SAME
};
const int8_t tensor_conv1d_1_kernel_0_data[] = TENSOR_CONV1D_1_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_1_kernel_0_dim[] = {2, 30, 15};
const nnom_qformat_param_t tensor_conv1d_1_kernel_0_dec[] = TENSOR_CONV1D_1_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_1_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_1_kernel_0 = {
    .p_data = (void*)tensor_conv1d_1_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_1_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_1_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_1_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_1_bias_0_data[] = TENSOR_CONV1D_1_BIAS_0;

const nnom_shape_data_t tensor_conv1d_1_bias_0_dim[] = {15};
const nnom_qformat_param_t tensor_conv1d_1_bias_0_dec[] = TENSOR_CONV1D_1_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_1_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_1_bias_0 = {
    .p_data = (void*)tensor_conv1d_1_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_1_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_1_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_1_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_1_output_shift[] = CONV1D_1_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_1_bias_shift[] = CONV1D_1_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_1_config = {
    .super = {.name = "conv1d_1"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_1_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_1_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_1_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_1_bias_shift, 
    .filter_size = 15,
    .kernel_size = {2},
    .stride_size = {2},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_SAME
};
const int8_t tensor_lstm_lstm_cell_kernel_0_data[] = TENSOR_LSTM_LSTM_CELL_KERNEL_0;

const nnom_shape_data_t tensor_lstm_lstm_cell_kernel_0_dim[] = {15, 40};
const nnom_qformat_param_t tensor_lstm_lstm_cell_kernel_0_dec[] = TENSOR_LSTM_LSTM_CELL_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_lstm_lstm_cell_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_lstm_lstm_cell_kernel_0 = {
    .p_data = (void*)tensor_lstm_lstm_cell_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_lstm_lstm_cell_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_lstm_lstm_cell_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_lstm_lstm_cell_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_lstm_lstm_cell_recurrent_kernel_0_data[] = TENSOR_LSTM_LSTM_CELL_RECURRENT_KERNEL_0;

const nnom_shape_data_t tensor_lstm_lstm_cell_recurrent_kernel_0_dim[] = {10, 40};
const nnom_qformat_param_t tensor_lstm_lstm_cell_recurrent_kernel_0_dec[] = TENSOR_LSTM_LSTM_CELL_RECURRENT_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_lstm_lstm_cell_recurrent_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_lstm_lstm_cell_recurrent_kernel_0 = {
    .p_data = (void*)tensor_lstm_lstm_cell_recurrent_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_lstm_lstm_cell_recurrent_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_lstm_lstm_cell_recurrent_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_lstm_lstm_cell_recurrent_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_lstm_lstm_cell_bias_0_data[] = TENSOR_LSTM_LSTM_CELL_BIAS_0;

const nnom_shape_data_t tensor_lstm_lstm_cell_bias_0_dim[] = {40};
const nnom_qformat_param_t tensor_lstm_lstm_cell_bias_0_dec[] = TENSOR_LSTM_LSTM_CELL_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_lstm_lstm_cell_bias_0_offset[] = {0};
const nnom_tensor_t tensor_lstm_lstm_cell_bias_0 = {
    .p_data = (void*)tensor_lstm_lstm_cell_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_lstm_lstm_cell_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_lstm_lstm_cell_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_lstm_lstm_cell_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_lstm_cell_config_t lstm_lstm_cell_config = {
    .super = {.name = "lstm"},
    .weights = (nnom_tensor_t*)&tensor_lstm_lstm_cell_kernel_0,
    .recurrent_weights = (nnom_tensor_t*)&tensor_lstm_lstm_cell_recurrent_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_lstm_lstm_cell_bias_0,
    .q_dec_z = 3,
    .q_dec_h = 7,
    .q_dec_c = 3,
    .units = 10
};

const nnom_rnn_config_t lstm_config = {
    .super = {.name = "lstm"},
    .return_sequence = true,
    .stateful = false,
    .go_backwards = false
};

const nnom_flatten_config_t flatten_config = {
    .super = {.name = "flatten"}
};
const int8_t tensor_dense_kernel_0_data[] = TENSOR_DENSE_KERNEL_0;

const nnom_shape_data_t tensor_dense_kernel_0_dim[] = {250, 13};
const nnom_qformat_param_t tensor_dense_kernel_0_dec[] = TENSOR_DENSE_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_dense_kernel_0 = {
    .p_data = (void*)tensor_dense_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_dense_bias_0_data[] = TENSOR_DENSE_BIAS_0;

const nnom_shape_data_t tensor_dense_bias_0_dim[] = {13};
const nnom_qformat_param_t tensor_dense_bias_0_dec[] = TENSOR_DENSE_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_bias_0_offset[] = {0};
const nnom_tensor_t tensor_dense_bias_0 = {
    .p_data = (void*)tensor_dense_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t dense_output_shift[] = DENSE_OUTPUT_RSHIFT;
const nnom_qformat_param_t dense_bias_shift[] = DENSE_BIAS_LSHIFT;
const nnom_dense_config_t dense_config = {
    .super = {.name = "dense"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_dense_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_dense_bias_0,
    .output_shift = (nnom_qformat_param_t *)&dense_output_shift,
    .bias_shift = (nnom_qformat_param_t *)&dense_bias_shift
};

const nnom_softmax_config_t softmax_config = {
    .super = {.name = "softmax"}
};
static int8_t nnom_output_data[13] = {0};

const nnom_shape_data_t tensor_output0_dim[] = {13};
const nnom_qformat_param_t tensor_output0_dec[] = {SOFTMAX_OUTPUT_DEC};
const nnom_qformat_param_t tensor_output0_offset[] = {0};
const nnom_tensor_t tensor_output0 = {
    .p_data = (void*)nnom_output_data,
    .dim = (nnom_shape_data_t*)tensor_output0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_output0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_output0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_io_config_t output0_config = {
    .super = {.name = "output0"},
    .tensor = (nnom_tensor_t*)&tensor_output0
};
/* model version */
#define NNOM_MODEL_VERSION (10000*0 + 100*4 + 3)

/* nnom model */
static nnom_model_t* nnom_model_create(void)
{
	static nnom_model_t model;
	nnom_layer_t* layer[10];

	check_model_version(NNOM_MODEL_VERSION);
	new_model(&model);

	layer[0] = input_s(&input_1_config);
	layer[1] = model.hook(conv2d_s(&conv1d_config), layer[0]);
	layer[2] = model.active(act_leaky_relu(0.300000f), layer[1]);
	layer[3] = model.hook(conv2d_s(&conv1d_1_config), layer[2]);
	layer[4] = model.active(act_leaky_relu(0.300000f), layer[3]);
	layer[5] = model.hook(rnn_s(lstm_cell_s(&lstm_lstm_cell_config), &lstm_config), layer[4]);
	layer[6] = model.hook(flatten_s(&flatten_config), layer[5]);
	layer[7] = model.hook(dense_s(&dense_config), layer[6]);
	layer[8] = model.hook(softmax_s(&softmax_config), layer[7]);
	layer[9] = model.hook(output_s(&output0_config), layer[8]);
	model_compile(&model, layer[0], layer[9]);
	return &model;
}
