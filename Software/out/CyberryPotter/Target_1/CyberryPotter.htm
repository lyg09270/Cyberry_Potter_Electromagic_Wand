<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\13087\Desktop\Cyberry_Potter_Electromagic_Wand\Software\out\CyberryPotter\Target_1\CyberryPotter.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\13087\Desktop\Cyberry_Potter_Electromagic_Wand\Software\out\CyberryPotter\Target_1\CyberryPotter.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Fri Jan 17 19:48:56 2025
<BR><P>
<H3>Maximum Stack Usage =        412 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
conv2d_run &rArr; local_convolve_HWC_q15_nonsquare &rArr; __NNOM_SSAT
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c5]">compile_layers</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">compile_layers</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6f]">Button_Status_Clear</a> from button.o(.text) referenced 2 times from button.o(.text)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from button.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from CyberryPotter.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6d]">IMU_Sample_Start</a> from IMU.o(.text) referenced 2 times from IMU.o(.text)
 <LI><a href="#[6e]">IMU_Sample_Stop</a> from IMU.o(.text) referenced 2 times from IMU.o(.text)
 <LI><a href="#[71]">LED_Blink</a> from LED.o(.text) referenced 2 times from LED.o(.text)
 <LI><a href="#[70]">Lazer_operate</a> from LED.o(.text) referenced 2 times from LED.o(.text)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6b]">Module10_Mode0_Handler</a> from module10.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[6c]">Module10_Mode1_Handler</a> from module10.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[5d]">Module3_Mode0_Handler</a> from module3.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[5e]">Module3_Mode1_Handler</a> from module3.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[5f]">Module4_Mode0_Handler</a> from module4.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[60]">Module4_Mode1_Handler</a> from module4.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[61]">Module5_Mode0_Handler</a> from module5.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[62]">Module5_Mode1_Handler</a> from module5.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[63]">Module6_Mode0_Handler</a> from module6.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[64]">Module6_Mode1_Handler</a> from module6.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[65]">Module7_Mode0_Handler</a> from module7.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[66]">Module7_Mode1_Handler</a> from module7.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[67]">Module8_Mode0_Handler</a> from module8.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[68]">Module8_Mode1_Handler</a> from module8.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[69]">Module9_Mode0_Handler</a> from module9.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[6a]">Module9_Mode1_Handler</a> from module9.o(.text) referenced 2 times from CyberryPotter.o(.text)
 <LI><a href="#[5c]">Module_IR_RF_Receive</a> from module_IR_RF.o(.text) referenced 6 times from CyberryPotter.o(.text)
 <LI><a href="#[5b]">Module_IR_RF_Transmit</a> from module_IR_RF.o(.text) referenced 6 times from CyberryPotter.o(.text)
 <LI><a href="#[59]">Module_None_Mode0_Handler</a> from CyberryPotter.o(.text) referenced 4 times from CyberryPotter.o(.text)
 <LI><a href="#[5a]">Module_None_Mode1_Handler</a> from CyberryPotter.o(.text) referenced 4 times from CyberryPotter.o(.text)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[72]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from module_IR_RF.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from button.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[73]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[3d]">activation_free</a> from nnom_activation.o(.text) referenced 2 times from nnom_activation.o(.text)
 <LI><a href="#[3b]">activation_run</a> from nnom_activation.o(.text) referenced 2 times from nnom_activation.o(.text)
 <LI><a href="#[40]">adv_relu_run</a> from nnom_activation.o(.text) referenced 2 times from nnom_activation.o(.text)
 <LI><a href="#[47]">conv2d_build</a> from nnom_conv2d.o(.text) referenced 4 times from nnom_conv2d.o(.text)
 <LI><a href="#[48]">conv2d_free</a> from nnom_conv2d.o(.text) referenced 2 times from nnom_conv2d.o(.text)
 <LI><a href="#[46]">conv2d_run</a> from nnom_conv2d.o(.text) referenced 4 times from nnom_conv2d.o(.text)
 <LI><a href="#[3c]">default_build</a> from nnom_baselayer.o(.text) referenced 8 times from nnom_activation.o(.text)
 <LI><a href="#[45]">default_run</a> from nnom_baselayer.o(.text) referenced 2 times from nnom_baselayer.o(.text)
 <LI><a href="#[4a]">dense_build</a> from nnom_dense.o(.text) referenced 4 times from nnom_dense.o(.text)
 <LI><a href="#[4b]">dense_free</a> from nnom_dense.o(.text) referenced 2 times from nnom_dense.o(.text)
 <LI><a href="#[49]">dense_run</a> from nnom_dense.o(.text) referenced 4 times from nnom_dense.o(.text)
 <LI><a href="#[4d]">flatten_build</a> from nnom_flatten.o(.text) referenced 2 times from nnom_flatten.o(.text)
 <LI><a href="#[4c]">flatten_run</a> from nnom_flatten.o(.text) referenced 2 times from nnom_flatten.o(.text)
 <LI><a href="#[74]">fputc</a> from USART.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[44]">hard_sigmoid_run</a> from nnom_activation.o(.text) referenced 2 times from nnom_activation.o(.text)
 <LI><a href="#[43]">hard_tanh_run</a> from nnom_activation.o(.text) referenced 2 times from nnom_activation.o(.text)
 <LI><a href="#[4f]">input_build</a> from nnom_input.o(.text) referenced 4 times from nnom_input.o(.text)
 <LI><a href="#[4e]">input_run</a> from nnom_input.o(.text) referenced 4 times from nnom_input.o(.text)
 <LI><a href="#[3f]">leaky_relu_run</a> from nnom_activation.o(.text) referenced 2 times from nnom_activation.o(.text)
 <LI><a href="#[52]">lstm_cell_free</a> from nnom_lstm_cell.o(.text) referenced 2 times from nnom_lstm_cell.o(.text)
 <LI><a href="#[51]">lstm_cell_q7_q15_build</a> from nnom_lstm_cell.o(.text) referenced 2 times from nnom_lstm_cell.o(.text)
 <LI><a href="#[50]">lstm_cell_q7_q15_run</a> from nnom_lstm_cell.o(.text) referenced 2 times from nnom_lstm_cell.o(.text)
 <LI><a href="#[35]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3a]">model_active</a> from nnom.o(.text) referenced 2 times from nnom.o(.text)
 <LI><a href="#[36]">model_add</a> from nnom.o(.text) referenced 2 times from nnom.o(.text)
 <LI><a href="#[37]">model_hook</a> from nnom.o(.text) referenced 2 times from nnom.o(.text)
 <LI><a href="#[38]">model_merge</a> from nnom.o(.text) referenced 2 times from nnom.o(.text)
 <LI><a href="#[39]">model_mergex</a> from nnom.o(.text) referenced 2 times from nnom.o(.text)
 <LI><a href="#[53]">output_run</a> from nnom_output.o(.text) referenced 4 times from nnom_output.o(.text)
 <LI><a href="#[3e]">relu_run</a> from nnom_activation.o(.text) referenced 2 times from nnom_activation.o(.text)
 <LI><a href="#[55]">rnn_build</a> from nnom_rnn.o(.text) referenced 2 times from nnom_rnn.o(.text)
 <LI><a href="#[56]">rnn_free</a> from nnom_rnn.o(.text) referenced 2 times from nnom_rnn.o(.text)
 <LI><a href="#[54]">rnn_run</a> from nnom_rnn.o(.text) referenced 2 times from nnom_rnn.o(.text)
 <LI><a href="#[41]">sigmoid_run</a> from nnom_activation.o(.text) referenced 2 times from nnom_activation.o(.text)
 <LI><a href="#[58]">softmax_build</a> from nnom_softmax.o(.text) referenced 2 times from nnom_softmax.o(.text)
 <LI><a href="#[57]">softmax_run</a> from nnom_softmax.o(.text) referenced 2 times from nnom_softmax.o(.text)
 <LI><a href="#[42]">tanh_run</a> from nnom_activation.o(.text) referenced 2 times from nnom_activation.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[73]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[236]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[75]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[222]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[237]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[238]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[239]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[23a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[23b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[23c]"></a>local_avepool_q7_HWC</STRONG> (Thumb, 494 bytes, Stack size 84 bytes, nnom_local.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>local_avepool_q7_CHW</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, nnom_local.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>local_maxpool_q7_HWC</STRONG> (Thumb, 508 bytes, Stack size 72 bytes, nnom_local.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>local_maxpool_q7_CHW</STRONG> (Thumb, 526 bytes, Stack size 76 bytes, nnom_local.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>local_sumpool_q7_HWC</STRONG> (Thumb, 474 bytes, Stack size 76 bytes, nnom_local.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>local_sumpool_q7_CHW</STRONG> (Thumb, 494 bytes, Stack size 84 bytes, nnom_local.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>local_up_sampling_q7_HWC</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[79]"></a>local_up_sampling_q7_CHW</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[7a]"></a>local_convolve_HWC_q7_nonsquare</STRONG> (Thumb, 832 bytes, Stack size 168 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = local_convolve_HWC_q7_nonsquare &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[7c]"></a>local_convolve_CHW_q7_nonsquare</STRONG> (Thumb, 614 bytes, Stack size 120 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[7d]"></a>local_conv_trans_HWC_q7_nonsquare</STRONG> (Thumb, 776 bytes, Stack size 168 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_deconv2d_calculate_position
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[7f]"></a>local_depthwise_separable_conv_HWC_q7_nonsquare</STRONG> (Thumb, 800 bytes, Stack size 184 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[80]"></a>local_depthwise_separable_conv_CHW_q7_nonsquare</STRONG> (Thumb, 820 bytes, Stack size 184 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[81]"></a>local_zero_padding_HWC_q7</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[83]"></a>local_zero_padding_CHW_q7</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[84]"></a>local_cropping_HWC_q7</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[85]"></a>local_cropping_CHW_q7</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[86]"></a>local_dot_q7_opt</STRONG> (Thumb, 1018 bytes, Stack size 80 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[87]"></a>local_dot_q7</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[88]"></a>local_fully_connected_q7_opt</STRONG> (Thumb, 1208 bytes, Stack size 88 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = local_fully_connected_q7_opt &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_run
</UL>

<P><STRONG><a name="[89]"></a>local_fully_connected_q7</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[8a]"></a>local_softmax_q7</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = local_softmax_q7 &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_USAT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_run
</UL>

<P><STRONG><a name="[8c]"></a>local_hard_sigmoid_q7</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = local_hard_sigmoid_q7 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_sigmoid_run
</UL>

<P><STRONG><a name="[102]"></a>local_hard_tanh_q7</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = local_hard_tanh_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_tanh_run
</UL>

<P><STRONG><a name="[ff]"></a>local_sigmoid_q7</STRONG> (Thumb, 174 bytes, Stack size 28 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = local_sigmoid_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmoid_run
</UL>

<P><STRONG><a name="[fe]"></a>local_tanh_q7</STRONG> (Thumb, 202 bytes, Stack size 28 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = local_tanh_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanh_run
</UL>

<P><STRONG><a name="[f7]"></a>local_relu_q7</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = local_relu_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relu_run
</UL>

<P><STRONG><a name="[f9]"></a>local_leaky_relu_q7</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = local_leaky_relu_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaky_relu_run
</UL>

<P><STRONG><a name="[fd]"></a>local_adv_relu_q7</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = local_adv_relu_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_relu_run
</UL>

<P><STRONG><a name="[91]"></a>local_mult_q7</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[92]"></a>local_add_q7</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[93]"></a>local_sub_q7</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[94]"></a>local_multiple_add_q7</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[95]"></a>local_multiple_mult_q7</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[96]"></a>local_multiple_sub_q7</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[242]"></a>local_q7_to_q15_no_shift</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, nnom_local.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>local_q7_to_q15</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = local_q7_to_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
</UL>

<P><STRONG><a name="[112]"></a>local_q15_to_q7</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = local_q15_to_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
</UL>

<P><STRONG><a name="[243]"></a>local_avepool_q15_HWC</STRONG> (Thumb, 498 bytes, Stack size 84 bytes, nnom_local_q15.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>local_avepool_q15_CHW</STRONG> (Thumb, 512 bytes, Stack size 88 bytes, nnom_local_q15.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>local_maxpool_q15_HWC</STRONG> (Thumb, 518 bytes, Stack size 72 bytes, nnom_local_q15.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>local_maxpool_q15_CHW</STRONG> (Thumb, 536 bytes, Stack size 76 bytes, nnom_local_q15.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>local_sumpool_q15_HWC</STRONG> (Thumb, 496 bytes, Stack size 88 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[99]"></a>local_sumpool_q15_CHW</STRONG> (Thumb, 516 bytes, Stack size 96 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[9a]"></a>local_up_sampling_q15_HWC</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[9b]"></a>local_up_sampling_q15_CHW</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[9c]"></a>local_convolve_HWC_q15_nonsquare</STRONG> (Thumb, 878 bytes, Stack size 176 bytes, nnom_local_q15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = local_convolve_HWC_q15_nonsquare &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[9d]"></a>local_convolve_CHW_q15_nonsquare</STRONG> (Thumb, 660 bytes, Stack size 128 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[9e]"></a>local_conv_trans_HWC_q15_nonsquare</STRONG> (Thumb, 854 bytes, Stack size 176 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_deconv2d_calculate_position
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[a0]"></a>local_depthwise_separable_conv_HWC_q15_nonsquare</STRONG> (Thumb, 758 bytes, Stack size 192 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[a1]"></a>local_depthwise_separable_conv_CHW_q15_nonsquare</STRONG> (Thumb, 776 bytes, Stack size 184 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[a2]"></a>local_zero_padding_HWC_q15</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a3]"></a>local_zero_padding_CHW_q15</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a4]"></a>local_cropping_HWC_q15</STRONG> (Thumb, 210 bytes, Stack size 64 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a5]"></a>local_cropping_CHW_q15</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a6]"></a>local_dot_q15</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[a7]"></a>local_dot_q15_opt</STRONG> (Thumb, 1010 bytes, Stack size 112 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[a8]"></a>local_fully_connected_mat_q7_vec_q15_opt</STRONG> (Thumb, 1220 bytes, Stack size 120 bytes, nnom_local_q15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = local_fully_connected_mat_q7_vec_q15_opt &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
</UL>

<P><STRONG><a name="[a9]"></a>local_fully_connected_mat_q7_vec_q15</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[aa]"></a>local_softmax_q15</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_USAT
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[ad]"></a>local_hard_sigmoid_q15</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, nnom_local_q15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = local_hard_sigmoid_q15 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_sigmoid_run
</UL>

<P><STRONG><a name="[101]"></a>local_hard_tanh_q15</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, nnom_local_q15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = local_hard_tanh_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_tanh_run
</UL>

<P><STRONG><a name="[f6]"></a>local_relu_q15</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, nnom_local_q15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = local_relu_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relu_run
</UL>

<P><STRONG><a name="[f8]"></a>local_leaky_relu_q15</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nnom_local_q15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = local_leaky_relu_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaky_relu_run
</UL>

<P><STRONG><a name="[fc]"></a>local_adv_relu_q15</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, nnom_local_q15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = local_adv_relu_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_relu_run
</UL>

<P><STRONG><a name="[ae]"></a>local_sigmoid_q15</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nnom_local_q15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = local_sigmoid_q15 &rArr; local_activation_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_activation_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmoid_run
</UL>

<P><STRONG><a name="[b0]"></a>local_tanh_q15</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nnom_local_q15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = local_tanh_q15 &rArr; local_activation_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_activation_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanh_run
</UL>

<P><STRONG><a name="[b1]"></a>local_mult_q15</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, nnom_local_q15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = local_mult_q15 &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
</UL>

<P><STRONG><a name="[b2]"></a>local_add_q15</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, nnom_local_q15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = local_add_q15 &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
</UL>

<P><STRONG><a name="[b3]"></a>local_sub_q15</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[b4]"></a>local_multiple_add_q15</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[b5]"></a>local_multiple_mult_q15</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[b6]"></a>local_multiple_sub_q15</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>

<P><STRONG><a name="[247]"></a>local_1_minor_z_q15</STRONG> (Thumb, 266 bytes, Stack size 28 bytes, nnom_local_q15.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>nnom_set_static_buf</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nnom_set_static_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>nnom_malloc</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>

<P><STRONG><a name="[b8]"></a>nnom_alignto</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nnom_alignto
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_malloc
</UL>

<P><STRONG><a name="[c2]"></a>nnom_free</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nnom_free
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_free
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_delete
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tensor
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delete
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_list_delete
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tensor_delete
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_delete
</UL>

<P><STRONG><a name="[ba]"></a>nnom_mem</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_malloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softmax
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_build
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_s
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_s
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flatten
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dense
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2D
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseLayer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_hard_sigmoid
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_hard_tanh
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_tanh
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_sigmoid
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_adv_relu
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_leaky_relu
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_relu
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_add_aux
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_io
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_hook
</UL>

<P><STRONG><a name="[248]"></a>nnom_mem_stat</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nnom.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>new_model</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = new_model &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[c0]"></a>model_delete</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nnom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_free
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_delete
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[249]"></a>nnom_io_length</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, nnom.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>nnom_hook_length</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nnom_hook_length
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[c5]"></a>compile_layers</STRONG> (Thumb, 960 bytes, Stack size 88 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + In Cycle
<LI>Call Chain = compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_hook_length
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_input_mem
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_comp_mem
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_memory_block_info
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_layer_info
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_shortcut_add
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_block
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[d0]"></a>mem_analysis_result</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mem_analysis_result &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[d3]"></a>block_mem_set</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[d4]"></a>tensor_mem_set</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tensor_mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[d1]"></a>set_tailed_activation</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_tailed_activation &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[d2]"></a>model_compile</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tailed_activation
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_mem_set
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mem_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_analysis_result
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_set_ops
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sequencial_compile
</UL>

<P><STRONG><a name="[d6]"></a>sequencial_compile</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, nnom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last
</UL>

<P><STRONG><a name="[d7]"></a>layer_run</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = layer_run &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run_to
</UL>

<P><STRONG><a name="[d8]"></a>model_run_to</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = model_run_to &rArr; layer_run &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_run
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run
</UL>

<P><STRONG><a name="[d9]"></a>model_run</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = model_run &rArr; model_run_to &rArr; layer_run &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run_to
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_get_output
</UL>

<P><STRONG><a name="[24a]"></a>model_set_callback</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, nnom.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>model_delete_callback</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, nnom.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>check_model_version</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_model_version &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[24c]"></a>shape_size</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nnom_layers.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>shape</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nnom_layers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shape
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dilation
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stride
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel
</UL>

<P><STRONG><a name="[db]"></a>kernel</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nnom_layers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = kernel &rArr; shape
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
</UL>

<P><STRONG><a name="[dd]"></a>stride</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nnom_layers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stride &rArr; shape
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
</UL>

<P><STRONG><a name="[de]"></a>dilation</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nnom_layers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dilation &rArr; shape
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
</UL>

<P><STRONG><a name="[24d]"></a>border</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nnom_layers.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>io_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nnom_layers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softmax
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_s
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flatten
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dense
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2D
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseLayer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_add_aux
</UL>

<P><STRONG><a name="[df]"></a>io_add_aux</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nnom_layers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>

<P><STRONG><a name="[c7]"></a>tensor_size</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, nnom_tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tensor_size
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_run
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_run
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_run
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_run
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_sigmoid_run
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_tanh_run
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanh_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sigmoid_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_relu_run
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaky_relu_run
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relu_run
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size_byte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_mem_size
</UL>

<P><STRONG><a name="[e1]"></a>tensor_size_byte</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nnom_tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tensor_size_byte &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_run
</UL>

<P><STRONG><a name="[e6]"></a>tensor_get_num_channel</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, nnom_tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tensor_get_num_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_build
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_build
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_run
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_build
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
</UL>

<P><STRONG><a name="[e2]"></a>new_tensor</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, nnom_tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_build
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_build
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_build
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dense
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2D
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
</UL>

<P><STRONG><a name="[e3]"></a>delete_tensor</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nnom_tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delete_tensor &rArr; nnom_free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_free
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_free
</UL>

<P><STRONG><a name="[e4]"></a>tensor_set_attr_v</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, nnom_tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tensor_set_attr_v
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
</UL>

<P><STRONG><a name="[e5]"></a>tensor_set_attr</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, nnom_tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tensor_set_attr &rArr; tensor_get_num_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
</UL>

<P><STRONG><a name="[e8]"></a>tensor_cpy_attr</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, nnom_tensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tensor_cpy_attr &rArr; tensor_get_num_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_build
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_build
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
</UL>

<P><STRONG><a name="[24e]"></a>tensor_hwc2chw_q7</STRONG> (Thumb, 150 bytes, Stack size 28 bytes, nnom_tensor.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>tensor_chw2hwc_q7</STRONG> (Thumb, 164 bytes, Stack size 36 bytes, nnom_tensor.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>hwc2chw_q7</STRONG> (Thumb, 146 bytes, Stack size 36 bytes, nnom_tensor.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>chw2hwc_q7</STRONG> (Thumb, 160 bytes, Stack size 44 bytes, nnom_tensor.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>Activation</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, nnom_activation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TanH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigmoid
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvReLU
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeakyReLU
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLU
</UL>

<P><STRONG><a name="[3b]"></a>activation_run</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nnom_activation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = activation_run &rArr; act_tensor_run
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_tensor_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_activation.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>activation_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nnom_activation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = activation_free &rArr; act_delete &rArr; nnom_free
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_activation.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>ReLU</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nnom_activation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_relu
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation
</UL>

<P><STRONG><a name="[ed]"></a>act_relu</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nnom_activation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLU
</UL>

<P><STRONG><a name="[ee]"></a>LeakyReLU</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nnom_activation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_leaky_relu
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation
</UL>

<P><STRONG><a name="[ef]"></a>act_leaky_relu</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nnom_activation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = act_leaky_relu &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeakyReLU
</UL>

<P><STRONG><a name="[f0]"></a>AdvReLU</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, nnom_activation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_adv_relu
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation
</UL>

<P><STRONG><a name="[f1]"></a>act_adv_relu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, nnom_activation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvReLU
</UL>

<P><STRONG><a name="[f2]"></a>Sigmoid</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nnom_activation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_sigmoid
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation
</UL>

<P><STRONG><a name="[f3]"></a>act_sigmoid</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nnom_activation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sigmoid
</UL>

<P><STRONG><a name="[f4]"></a>TanH</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nnom_activation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_tanh
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation
</UL>

<P><STRONG><a name="[f5]"></a>act_tanh</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nnom_activation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TanH
</UL>

<P><STRONG><a name="[eb]"></a>act_delete</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nnom_activation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = act_delete &rArr; nnom_free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activation_free
</UL>

<P><STRONG><a name="[ea]"></a>act_tensor_run</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nnom_activation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = act_tensor_run
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activation_run
</UL>

<P><STRONG><a name="[100]"></a>act_hard_tanh</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nnom_activation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>

<P><STRONG><a name="[103]"></a>act_hard_sigmoid</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nnom_activation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>

<P><STRONG><a name="[106]"></a>act_get_dec_bit</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, nnom_activation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = act_get_dec_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_build
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
</UL>

<P><STRONG><a name="[104]"></a>baselayer_s</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nnom_baselayer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseLayer
</UL>

<P><STRONG><a name="[105]"></a>BaseLayer</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nnom_baselayer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baselayer_s
</UL>

<P><STRONG><a name="[45]"></a>default_run</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nnom_baselayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = default_run &rArr; tensor_size_byte &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size_byte
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_baselayer.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>default_build</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, nnom_baselayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = default_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
</UL>
<BR>[Address Reference Count : 3]<UL><LI> nnom_baselayer.o(.text)
<LI> nnom_activation.o(.text)
<LI> nnom_output.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>conv2d_s</STRONG> (Thumb, 482 bytes, Stack size 104 bytes, nnom_conv2d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = conv2d_s &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dilation
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stride
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[46]"></a>conv2d_run</STRONG> (Thumb, 470 bytes, Stack size 216 bytes, nnom_conv2d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = conv2d_run &rArr; local_convolve_HWC_q15_nonsquare &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q15_nonsquare
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q7_nonsquare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_conv2d.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>conv2d_build</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, nnom_conv2d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = conv2d_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_output_length
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_conv2d.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>conv2d_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nnom_conv2d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = conv2d_free &rArr; delete_tensor &rArr; nnom_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_conv2d.o(.text)
</UL>
<P><STRONG><a name="[109]"></a>Conv2D</STRONG> (Thumb, 472 bytes, Stack size 120 bytes, nnom_conv2d.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[108]"></a>conv_output_length</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, nnom_conv2d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = conv_output_length
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
</UL>

<P><STRONG><a name="[10a]"></a>dense_s</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, nnom_dense.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dense_s &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[49]"></a>dense_run</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, nnom_dense.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dense_run &rArr; local_fully_connected_q7_opt &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_fully_connected_q7_opt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_dense.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>dense_build</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, nnom_dense.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dense_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_dense.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>dense_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nnom_dense.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dense_free &rArr; delete_tensor &rArr; nnom_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_dense.o(.text)
</UL>
<P><STRONG><a name="[10b]"></a>Dense</STRONG> (Thumb, 338 bytes, Stack size 64 bytes, nnom_dense.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[10c]"></a>flatten_s</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nnom_flatten.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flatten_s &rArr; Flatten &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flatten
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[10d]"></a>Flatten</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, nnom_flatten.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Flatten &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
</UL>

<P><STRONG><a name="[4c]"></a>flatten_run</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, nnom_flatten.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flatten_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_flatten.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>flatten_build</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, nnom_flatten.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = flatten_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_flatten.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>input_s</STRONG> (Thumb, 364 bytes, Stack size 80 bytes, nnom_input.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = input_s &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr_v
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
</UL>

<P><STRONG><a name="[4e]"></a>input_run</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nnom_input.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = input_run &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_input.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>input_build</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nnom_input.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = input_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_input.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>Input</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, nnom_input.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr_v
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output
</UL>

<P><STRONG><a name="[110]"></a>lstm_cell_s</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, nnom_lstm_cell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lstm_cell_s &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[50]"></a>lstm_cell_q7_q15_run</STRONG> (Thumb, 566 bytes, Stack size 112 bytes, nnom_lstm_cell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = lstm_cell_q7_q15_run &rArr; local_fully_connected_mat_q7_vec_q15_opt &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_add_q15
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_mult_q15
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_tanh_q15
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_sigmoid_q15
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_fully_connected_mat_q7_vec_q15_opt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_q15_to_q7
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_q7_to_q15
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_lstm_cell.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>lstm_cell_q7_q15_build</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, nnom_lstm_cell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lstm_cell_q7_q15_build
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_lstm_cell.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>lstm_cell_free</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, nnom_lstm_cell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lstm_cell_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_lstm_cell.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>output_s</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nnom_output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = output_s &rArr; input_s &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_free
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[53]"></a>output_run</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nnom_output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = output_run &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_output.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>Output</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, nnom_output.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_free
</UL>

<P><STRONG><a name="[115]"></a>rnn_s</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, nnom_rnn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rnn_s &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[54]"></a>rnn_run</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, nnom_rnn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rnn_run &rArr; tensor_get_num_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_rnn.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>rnn_build</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, nnom_rnn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rnn_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_rnn.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>rnn_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nnom_rnn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rnn_free &rArr; nnom_free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_rnn.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>softmax_s</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nnom_softmax.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = softmax_s &rArr; Softmax &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softmax
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[117]"></a>Softmax</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nnom_softmax.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Softmax &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_s
</UL>

<P><STRONG><a name="[57]"></a>softmax_run</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nnom_softmax.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = softmax_run &rArr; local_softmax_q7 &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_softmax_q7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_softmax.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>softmax_build</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nnom_softmax.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = softmax_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_softmax.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>Module_None_Mode0_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, CyberryPotter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Module_None_Mode0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>Module_None_Mode1_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, CyberryPotter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Module_None_Mode1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[12a]"></a>Module_Detect</STRONG> (Thumb, 542 bytes, Stack size 4 bytes, CyberryPotter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Module_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[118]"></a>Module_Init</STRONG> (Thumb, 664 bytes, Stack size 56 bytes, CyberryPotter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Module_Init &rArr; Module_IR_RF_Init &rArr; Module0_IR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module10_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module9_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module8_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module7_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module6_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module5_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module3_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[122]"></a>System_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, CyberryPotter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = System_Init &rArr; IMU_Init &rArr; MPU6050_Init &rArr; run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Deinit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Detect
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>Cyberry_Potter_System_Status_Update</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, CyberryPotter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cyberry_Potter_System_Status_Update &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, CyberryPotter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = EXTI9_5_IRQHandler &rArr; IMU_Get_Data &rArr; IIC1_read &rArr; IIC1_Send_Ack &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Record_Duration
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_receiver_start
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Get_Data
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[162]"></a>EXTI_Stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, CyberryPotter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Transmit
</UL>

<P><STRONG><a name="[163]"></a>EXTI_Restore</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, CyberryPotter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Receive
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Transmit
</UL>

<P><STRONG><a name="[132]"></a>ADC_GetValue</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, CyberryPotter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
</UL>

<P><STRONG><a name="[137]"></a>Delay_us</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, Delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SCL
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SDA
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SCL
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SDA
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Transmit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Transmit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Transmit
</UL>

<P><STRONG><a name="[136]"></a>Delay_ms</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, Delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Delay_ms &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_s
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module3_Mode1_Handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module3_Mode0_Handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink
</UL>

<P><STRONG><a name="[138]"></a>Delay_s</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, Delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[139]"></a>IIC1_Init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, IIC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[13d]"></a>IIC2_Init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, IIC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>

<P><STRONG><a name="[13e]"></a>IIC1_write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, IIC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Receive_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_bias_6500_reg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_bias_6050_reg
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_bias_reg
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[146]"></a>IIC1_read</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, IIC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IIC1_read &rArr; IIC1_Send_Ack &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Send_Ack
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Receive_Byte
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Receive_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_int_status
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_6500_gyro_bias
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_6050_accel_bias
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_6500_accel_bias
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_reg
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_reg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_reg
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reg_dump
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Get_Data
</UL>

<P><STRONG><a name="[149]"></a>IIC2_write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, IIC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Stop
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Receive_Ack
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Send_Byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Start
</UL>

<P><STRONG><a name="[151]"></a>IIC2_read</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, IIC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Send_Ack
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Receive_Byte
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Stop
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Receive_Ack
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Send_Byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Start
</UL>

<P><STRONG><a name="[6d]"></a>IMU_Sample_Start</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, IMU.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> IMU.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>IMU_Sample_Stop</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, IMU.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> IMU.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>IMU_Get_Data</STRONG> (Thumb, 416 bytes, Stack size 72 bytes, IMU.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = IMU_Get_Data &rArr; IIC1_read &rArr; IIC1_Send_Ack &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>IMU_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, IMU.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = IMU_Init &rArr; MPU6050_Init &rArr; run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[159]"></a>model_feed_data</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = model_feed_data &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_get_output
</UL>

<P><STRONG><a name="[15f]"></a>model_get_output</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = model_get_output &rArr; model_feed_data &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = main &rArr; System_Init &rArr; IMU_Init &rArr; MPU6050_Init &rArr; run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_get_output
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Restore
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Stop
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cyberry_Potter_System_Status_Update
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_set_static_buf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[158]"></a>MPU6050_Init</STRONG> (Thumb, 436 bytes, Stack size 72 bytes, MPU6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = MPU6050_Init &rArr; run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
</UL>

<P><STRONG><a name="[17b]"></a>W25Q64_ReadID</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, W25Q64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Stop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SwapByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Start
</UL>

<P><STRONG><a name="[17f]"></a>W25Q64_WriteEnable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, W25Q64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = W25Q64_WriteEnable &rArr; SPI2_SwapByte &rArr; SPI_I2S_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Stop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SwapByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Write_Sector
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Wirte_Protect_Disable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SectorErase
</UL>

<P><STRONG><a name="[180]"></a>W25Q64_WaitBusy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, W25Q64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = W25Q64_WaitBusy &rArr; SPI2_SwapByte &rArr; SPI_I2S_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Stop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SwapByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Write_Sector
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Wirte_Protect_Disable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SectorErase
</UL>

<P><STRONG><a name="[181]"></a>W25Q64_SectorErase</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, W25Q64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = W25Q64_SectorErase &rArr; W25Q64_WaitBusy &rArr; SPI2_SwapByte &rArr; SPI_I2S_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WaitBusy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WriteEnable
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Stop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SwapByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Write_Sector
</UL>

<P><STRONG><a name="[182]"></a>W25Q64_Wirte_Protect_Disable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, W25Q64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WaitBusy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WriteEnable
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Stop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SwapByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[183]"></a>W25Q64_Write_Sector</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, W25Q64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = W25Q64_Write_Sector &rArr; W25Q64_SectorErase &rArr; W25Q64_WaitBusy &rArr; SPI2_SwapByte &rArr; SPI_I2S_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SectorErase
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WaitBusy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WriteEnable
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Stop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SwapByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Receive
</UL>

<P><STRONG><a name="[184]"></a>W25Q64_Read_Sector</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, W25Q64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = W25Q64_Read_Sector &rArr; SPI2_SwapByte &rArr; SPI_I2S_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Stop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SwapByte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Transmit
</UL>

<P><STRONG><a name="[185]"></a>W25Q64_Print_Buffer</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, W25Q64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[18f]"></a>get_tick_count</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_reg
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_reg
</UL>

<P><STRONG><a name="[186]"></a>mpu_reg_dump</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[187]"></a>mpu_read_reg</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
</UL>

<P><STRONG><a name="[168]"></a>mpu_init</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mpu_init &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[175]"></a>mpu_set_gyro_fsr</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mpu_set_gyro_fsr &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[174]"></a>mpu_set_accel_fsr</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mpu_set_accel_fsr &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[188]"></a>mpu_set_lpf</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpu_set_lpf &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[16b]"></a>mpu_set_sample_rate</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[16a]"></a>mpu_configure_fifo</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[189]"></a>mpu_set_bypass</STRONG> (Thumb, 498 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpu_set_bypass &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[169]"></a>mpu_set_sensors</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mpu_set_sensors &rArr; mpu_set_int_latched &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[18a]"></a>mpu_lp_accel_mode</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
</UL>

<P><STRONG><a name="[18d]"></a>mpu_set_int_latched</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpu_set_int_latched &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
</UL>

<P><STRONG><a name="[18e]"></a>mpu_get_gyro_reg</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
</UL>

<P><STRONG><a name="[190]"></a>mpu_get_accel_reg</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
</UL>

<P><STRONG><a name="[191]"></a>mpu_get_temperature</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[194]"></a>mpu_read_6500_accel_bias</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_bias_6500_reg
</UL>

<P><STRONG><a name="[195]"></a>mpu_read_6050_accel_bias</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_bias_6050_reg
</UL>

<P><STRONG><a name="[196]"></a>mpu_read_6500_gyro_bias</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
</UL>

<P><STRONG><a name="[197]"></a>mpu_set_gyro_bias_reg</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>

<P><STRONG><a name="[198]"></a>mpu_set_accel_bias_6050_reg</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_6050_accel_bias
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>

<P><STRONG><a name="[199]"></a>mpu_set_accel_bias_6500_reg</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_6500_accel_bias
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>

<P><STRONG><a name="[18c]"></a>mpu_reset_fifo</STRONG> (Thumb, 656 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpu_reset_fifo &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[19d]"></a>mpu_get_gyro_fsr</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpu_get_gyro_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[19e]"></a>mpu_get_accel_fsr</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpu_get_accel_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[19f]"></a>mpu_get_lpf</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpu_get_lpf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[1a0]"></a>mpu_get_sample_rate</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpu_get_sample_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[252]"></a>mpu_get_compass_sample_rate</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>mpu_set_compass_sample_rate</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>mpu_get_gyro_sens</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpu_get_gyro_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[179]"></a>mpu_get_accel_sens</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpu_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[1a1]"></a>mpu_get_fifo_config</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mpu_get_fifo_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[254]"></a>mpu_get_power_state</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>mpu_get_int_status</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
</UL>

<P><STRONG><a name="[19b]"></a>mpu_read_fifo</STRONG> (Thumb, 790 bytes, Stack size 48 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
</UL>

<P><STRONG><a name="[19c]"></a>mpu_read_fifo_stream</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[255]"></a>mpu_set_int_level</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>mpu_run_self_test</STRONG> (Thumb, 386 bytes, Stack size 72 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_fifo_config
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[172]"></a>mpu_set_dmp_state</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[1a9]"></a>mpu_write_mem</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_interrupt_mode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_pedometer_walk_time
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_pedometer_step_count
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
</UL>

<P><STRONG><a name="[1aa]"></a>mpu_read_mem</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mpu_read_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_walk_time
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_step_count
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[1ab]"></a>mpu_load_firmware</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mpu_load_firmware &rArr; mpu_read_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
</UL>

<P><STRONG><a name="[256]"></a>mpu_get_dmp_state</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>mpu_get_compass_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>mpu_get_compass_fsr</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, inv_mpu.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>mpu_lp_motion_interrupt</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, inv_mpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_fifo_config
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
</UL>

<P><STRONG><a name="[16c]"></a>dmp_load_motion_driver_firmware</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = dmp_load_motion_driver_firmware &rArr; mpu_load_firmware &rArr; mpu_read_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[16e]"></a>dmp_set_orientation</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = dmp_set_orientation &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[173]"></a>dmp_set_gyro_bias</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = dmp_set_gyro_bias &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[17a]"></a>dmp_set_accel_bias</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = dmp_set_accel_bias &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[170]"></a>dmp_set_fifo_rate</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = dmp_set_fifo_rate &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[259]"></a>dmp_get_fifo_rate</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>dmp_set_tap_thresh</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1b0]"></a>dmp_set_tap_axes</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_set_tap_axes &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1b1]"></a>dmp_set_tap_count</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_set_tap_count &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1b2]"></a>dmp_set_tap_time</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_set_tap_time &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1b3]"></a>dmp_set_tap_time_multi</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_set_tap_time_multi &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1b4]"></a>dmp_set_shake_reject_thresh</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dmp_set_shake_reject_thresh &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1b5]"></a>dmp_set_shake_reject_time</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_set_shake_reject_time &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1b6]"></a>dmp_set_shake_reject_timeout</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_set_shake_reject_timeout &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1b7]"></a>dmp_get_pedometer_step_count</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
</UL>

<P><STRONG><a name="[1b8]"></a>dmp_set_pedometer_step_count</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>

<P><STRONG><a name="[1b9]"></a>dmp_get_pedometer_walk_time</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
</UL>

<P><STRONG><a name="[1ba]"></a>dmp_set_pedometer_walk_time</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>

<P><STRONG><a name="[16f]"></a>dmp_enable_feature</STRONG> (Thumb, 682 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = dmp_enable_feature &rArr; dmp_enable_gyro_cal &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[1bb]"></a>dmp_enable_gyro_cal</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = dmp_enable_gyro_cal &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1bc]"></a>dmp_enable_lp_quat</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_enable_lp_quat &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1bd]"></a>dmp_enable_6x_lp_quat</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmp_enable_6x_lp_quat &rArr; mpu_write_mem &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[25a]"></a>dmp_get_enabled_features</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>dmp_set_interrupt_mode</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>

<P><STRONG><a name="[1bf]"></a>dmp_read_fifo</STRONG> (Thumb, 466 bytes, Stack size 88 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_gesture
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
</UL>

<P><STRONG><a name="[25b]"></a>dmp_register_tap_cb</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>dmp_register_android_orient_cb</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>SPI1_Init</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, SPI.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[1c4]"></a>SPI1_Start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, SPI.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>

<P><STRONG><a name="[1c5]"></a>SPI1_Stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, SPI.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>

<P><STRONG><a name="[1c6]"></a>SPI1_SwapByte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, SPI.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>

<P><STRONG><a name="[126]"></a>SPI2_Init</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, SPI.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[17c]"></a>SPI2_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, SPI.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI2_Start &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Read_Sector
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Write_Sector
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Wirte_Protect_Disable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SectorErase
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WaitBusy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WriteEnable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_ReadID
</UL>

<P><STRONG><a name="[17e]"></a>SPI2_Stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, SPI.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI2_Stop &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Read_Sector
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Write_Sector
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Wirte_Protect_Disable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SectorErase
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WaitBusy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WriteEnable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_ReadID
</UL>

<P><STRONG><a name="[17d]"></a>SPI2_SwapByte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, SPI.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI2_SwapByte &rArr; SPI_I2S_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Read_Sector
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Write_Sector
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Wirte_Protect_Disable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_SectorErase
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WaitBusy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_WriteEnable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_ReadID
</UL>

<P><STRONG><a name="[123]"></a>USART1_Init</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, USART.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USART1_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[74]"></a>fputc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, USART.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[1cf]"></a>USART3_Init</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, USART.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USART3_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module3_Init
</UL>

<P><STRONG><a name="[1f4]"></a>USART3_WriteByte</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, USART.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART3_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module3_Mode1_Handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module3_Mode0_Handler
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EXTI0_IRQHandler &rArr; EXTI_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>Button_Status_Clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, button.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> button.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>Button_Init</STRONG> (Thumb, 232 bytes, Stack size 80 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Button_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[71]"></a>LED_Blink</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, LED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LED_Blink &rArr; Delay_ms &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> LED.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>Lazer_operate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, LED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Lazer_operate &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> LED.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>LED_Init</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, LED.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[128]"></a>ADC_PB1_Init</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, ADC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADC_PB1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[12b]"></a>ADC1_Deinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ADC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC1_Deinit &rArr; ADC_DeInit &rArr; RCC_APB2PeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[129]"></a>ADC_PB1_GetAvg</STRONG> (Thumb, 484 bytes, Stack size 80 bytes, ADC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ADC_PB1_GetAvg &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetValue
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[1e0]"></a>Module0_IR_Init</STRONG> (Thumb, 328 bytes, Stack size 128 bytes, module0_IR.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Module0_IR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Init
</UL>

<P><STRONG><a name="[1e3]"></a>Module0_IR_38Khz_Logic</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, module0_IR.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Module0_IR_38Khz_Logic &rArr; TIM_SetCompare1
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Transmit
</UL>

<P><STRONG><a name="[1e5]"></a>Module0_IR_Transmit</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, module0_IR.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Module0_IR_Transmit &rArr; Module0_IR_38Khz_Logic &rArr; TIM_SetCompare1
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_38Khz_Logic
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Transmit
</UL>

<P><STRONG><a name="[1e7]"></a>Module1_RF433_Init</STRONG> (Thumb, 240 bytes, Stack size 96 bytes, module1_RF433.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Module1_RF433_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Init
</UL>

<P><STRONG><a name="[1e8]"></a>Module1_RF433_Logic</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, module1_RF433.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Module1_RF433_Logic &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Transmit
</UL>

<P><STRONG><a name="[1e9]"></a>Module1_RF433_Transmit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, module1_RF433.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Module1_RF433_Transmit &rArr; Module1_RF433_Logic &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Logic
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Transmit
</UL>

<P><STRONG><a name="[1ea]"></a>Module2_RF315_Init</STRONG> (Thumb, 240 bytes, Stack size 96 bytes, module2_RF315.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Module2_RF315_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Init
</UL>

<P><STRONG><a name="[1eb]"></a>Module2_RF315_Logic</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, module2_RF315.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Module2_RF315_Logic &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Transmit
</UL>

<P><STRONG><a name="[1ec]"></a>Module2_RF315_Transmit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, module2_RF315.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Module2_RF315_Transmit &rArr; Module2_RF315_Logic &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Logic
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Transmit
</UL>

<P><STRONG><a name="[119]"></a>Module_IR_RF_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, module_IR_RF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Module_IR_RF_Init &rArr; Module0_IR_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Init
</UL>

<P><STRONG><a name="[130]"></a>Module_IR_RF_receiver_start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, module_IR_RF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Module_IR_RF_receiver_start &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>Module_IR_RF_Record_Duration</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, module_IR_RF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Module_IR_RF_Record_Duration &rArr; TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[1ee]"></a>Module_IR_RF_receiver_stop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, module_IR_RF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Module_IR_RF_receiver_stop &rArr; TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1f0]"></a>Module_IR_RF_Copy_From_Buffer</STRONG> (Thumb, 192 bytes, Stack size 4 bytes, module_IR_RF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Module_IR_RF_Copy_From_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Transmit
</UL>

<P><STRONG><a name="[1f1]"></a>Module_IR_RF_Copy_To_Buffer</STRONG> (Thumb, 190 bytes, Stack size 4 bytes, module_IR_RF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Module_IR_RF_Copy_To_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Receive
</UL>

<P><STRONG><a name="[1f2]"></a>Module_IR_RF_Data_Reset</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, module_IR_RF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Module_IR_RF_Data_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Receive
</UL>

<P><STRONG><a name="[1ef]"></a>Module_IR_RF_Print</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, module_IR_RF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Module_IR_RF_Print &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Receive
</UL>

<P><STRONG><a name="[5b]"></a>Module_IR_RF_Transmit</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, module_IR_RF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Module_IR_RF_Transmit &rArr; Module0_IR_Transmit &rArr; Module0_IR_38Khz_Logic &rArr; TIM_SetCompare1
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Read_Sector
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Restore
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Stop
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Copy_From_Buffer
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Transmit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Transmit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Transmit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>Module_IR_RF_Receive</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, module_IR_RF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Module_IR_RF_Receive &rArr; W25Q64_Write_Sector &rArr; W25Q64_SectorErase &rArr; W25Q64_WaitBusy &rArr; SPI2_SwapByte &rArr; SPI_I2S_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Write_Sector
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Restore
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Print
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Data_Reset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Copy_To_Buffer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, module_IR_RF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM2_IRQHandler &rArr; Module_IR_RF_receiver_stop &rArr; TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_receiver_stop
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>Module3_Init</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, module3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Module3_Init &rArr; USART3_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Init
</UL>

<P><STRONG><a name="[5d]"></a>Module3_Mode0_Handler</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, module3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Module3_Mode0_Handler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_WriteByte
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>Module3_Mode1_Handler</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, module3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Module3_Mode1_Handler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_WriteByte
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>Module4_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Init
</UL>

<P><STRONG><a name="[5f]"></a>Module4_Mode0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>Module4_Mode1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>Module5_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Init
</UL>

<P><STRONG><a name="[61]"></a>Module5_Mode0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module5.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>Module5_Mode1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module5.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>Module6_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Init
</UL>

<P><STRONG><a name="[63]"></a>Module6_Mode0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>Module6_Mode1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>Module7_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module7.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Init
</UL>

<P><STRONG><a name="[65]"></a>Module7_Mode0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>Module7_Mode1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>Module8_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module8.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Init
</UL>

<P><STRONG><a name="[67]"></a>Module8_Mode0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>Module8_Mode1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>Module9_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module9.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Init
</UL>

<P><STRONG><a name="[69]"></a>Module9_Mode0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module9.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>Module9_Mode1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module9.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>Module10_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Init
</UL>

<P><STRONG><a name="[6b]"></a>Module10_Mode0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>Module10_Mode1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> CyberryPotter.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>SystemInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[25d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>ADC_DeInit</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_DeInit &rArr; RCC_APB2PeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Deinit
</UL>

<P><STRONG><a name="[1d7]"></a>ADC_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_Init
</UL>

<P><STRONG><a name="[25e]"></a>ADC_StructInit</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>ADC_Cmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_Init
</UL>

<P><STRONG><a name="[25f]"></a>ADC_DMACmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>ADC_ITConfig</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>ADC_ResetCalibration</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_ResetCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_Init
</UL>

<P><STRONG><a name="[1db]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetResetCalibrationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_Init
</UL>

<P><STRONG><a name="[1dc]"></a>ADC_StartCalibration</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_StartCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_Init
</UL>

<P><STRONG><a name="[1dd]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetCalibrationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_Init
</UL>

<P><STRONG><a name="[133]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SoftwareStartConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetValue
</UL>

<P><STRONG><a name="[261]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_Init
</UL>

<P><STRONG><a name="[264]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>ADC_GetConversionValue</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetValue
</UL>

<P><STRONG><a name="[265]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 250 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetValue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetValue
</UL>

<P><STRONG><a name="[274]"></a>ADC_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>ADC_GetITStatus</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>EXTI_DeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>EXTI_Init</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Init
</UL>

<P><STRONG><a name="[278]"></a>EXTI_StructInit</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>EXTI_ClearFlag</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>EXTI_GetITStatus</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1cd]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
</UL>

<P><STRONG><a name="[166]"></a>NVIC_Init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
</UL>

<P><STRONG><a name="[27c]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>GPIO_DeInit</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1f9]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[13b]"></a>GPIO_Init</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[27f]"></a>GPIO_StructInit</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_R_SDA
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_R_SDA
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[280]"></a>GPIO_ReadInputData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>GPIO_SetBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>GPIO_ResetBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>GPIO_WriteBit</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Stop
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SCL
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SDA
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SCL
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SDA
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Logic
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Logic
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lazer_operate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Stop
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Start
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[285]"></a>GPIO_Write</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Init
</UL>

<P><STRONG><a name="[28a]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>RCC_DeInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>RCC_HSEConfig</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[1fb]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[28d]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>RCC_HSICmd</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>RCC_PLLConfig</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>RCC_PLLCmd</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>RCC_HCLKConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>RCC_PCLK1Config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>RCC_PCLK2Config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>RCC_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_Init
</UL>

<P><STRONG><a name="[298]"></a>RCC_LSEConfig</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>RCC_LSICmd</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[29c]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module3_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[1ca]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
</UL>

<P><STRONG><a name="[1f7]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[1fd]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[29d]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>RCC_MCOConfig</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>RCC_GetITStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1c2]"></a>SPI_Init</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[1fe]"></a>I2S_Init</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[2a3]"></a>SPI_StructInit</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>I2S_StructInit</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>SPI_Cmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[2a5]"></a>I2S_Cmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>SPI_I2S_SendData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SwapByte
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SwapByte
</UL>

<P><STRONG><a name="[1c9]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_I2S_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SwapByte
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SwapByte
</UL>

<P><STRONG><a name="[2a8]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>SPI_TransmitCRC</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2ac]"></a>SPI_CalculateCRC</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>SPI_GetCRC</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SwapByte
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SwapByte
</UL>

<P><STRONG><a name="[2b0]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>TIM_DeInit</STRONG> (Thumb, 666 bytes, Stack size 80 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1d3]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 322 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Init
</UL>

<P><STRONG><a name="[1e2]"></a>TIM_OC1Init</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Init
</UL>

<P><STRONG><a name="[2b3]"></a>TIM_OC2Init</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>TIM_OC3Init</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>TIM_OC4Init</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>TIM_ICInit</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>

<P><STRONG><a name="[203]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[205]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[207]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[209]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[20a]"></a>TIM_PWMIConfig</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>

<P><STRONG><a name="[2b6]"></a>TIM_BDTRConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>TIM_OCStructInit</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_OCStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Init
</UL>

<P><STRONG><a name="[2b8]"></a>TIM_ICStructInit</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>TIM_Cmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_receiver_start
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_receiver_stop
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Transmit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[2ba]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>TIM_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Init
</UL>

<P><STRONG><a name="[2bb]"></a>TIM_GenerateEvent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>TIM_DMAConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>TIM_DMACmd</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[20c]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[20d]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>

<P><STRONG><a name="[20e]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[20f]"></a>TIM_ETRConfig</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[210]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[2bf]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>TIM_SelectCOM</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>TIM_CCxCmd</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>TIM_CCxNCmd</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>TIM_SelectOCxM</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>TIM_SetCounter</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Record_Duration
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_receiver_stop
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Transmit
</UL>

<P><STRONG><a name="[2e7]"></a>TIM_SetAutoreload</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>TIM_SetCompare1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_38Khz_Logic
</UL>

<P><STRONG><a name="[2e8]"></a>TIM_SetCompare2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>TIM_SetCompare3</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>TIM_SetCompare4</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>TIM_SetClockDivision</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>TIM_GetCapture1</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>TIM_GetCapture2</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>TIM_GetCapture3</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>TIM_GetCapture4</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>TIM_GetCounter</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Record_Duration
</UL>

<P><STRONG><a name="[2f0]"></a>TIM_GetPrescaler</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>TIM_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module2_RF315_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module1_RF433_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module0_IR_Init
</UL>

<P><STRONG><a name="[1d1]"></a>TIM_GetITStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[1d2]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[211]"></a>USART_DeInit</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1cb]"></a>USART_Init</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
</UL>

<P><STRONG><a name="[2f2]"></a>USART_StructInit</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>USART_ClockInit</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>USART_ClockStructInit</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>USART_Cmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
</UL>

<P><STRONG><a name="[1cc]"></a>USART_ITConfig</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
</UL>

<P><STRONG><a name="[2f5]"></a>USART_DMACmd</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>USART_SetAddress</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>USART_WakeUpConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>USART_LINCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>USART_SendData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>USART_ReceiveData</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>USART_SendBreak</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>USART_SetGuardTime</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>USART_SetPrescaler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>USART_SmartCardCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>USART_IrDAConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>USART_IrDACmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>USART_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>USART_ClearFlag</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>USART_GetITStatus</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_softmax_q15
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_run
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_run
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dense
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2D
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_run
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr_v
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_cropping_CHW_q15
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_cropping_HWC_q15
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_zero_padding_CHW_q15
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_zero_padding_HWC_q15
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_up_sampling_q15_CHW
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_up_sampling_q15_HWC
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_cropping_CHW_q7
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_cropping_HWC_q7
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_zero_padding_CHW_q7
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_zero_padding_HWC_q7
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_up_sampling_q7_CHW
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_up_sampling_q7_HWC
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
</UL>

<P><STRONG><a name="[30b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[30c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_run
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_zero_padding_CHW_q15
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_zero_padding_HWC_q15
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_zero_padding_CHW_q7
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_zero_padding_HWC_q7
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delete
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
</UL>

<P><STRONG><a name="[30e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1ac]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[1f3]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module3_Mode1_Handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module3_Mode0_Handler
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_hard_sigmoid_q15
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_hard_sigmoid_q7
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
</UL>

<P><STRONG><a name="[219]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_adv_relu
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_leaky_relu
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_relu_run
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_hard_sigmoid_q15
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_hard_sigmoid_q7
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_get_output
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_get_output
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Get_Data
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_fcmple</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_fcmplt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmplt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_fcmpge</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpge.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_relu_run
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpeq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_relu_run
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_dcmple</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_relu_run
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_hard_sigmoid_q15
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_hard_sigmoid_q7
</UL>

<P><STRONG><a name="[1af]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_get_output
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Get_Data
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_adv_relu
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_leaky_relu
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_relu_run
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_hard_sigmoid_q15
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_hard_sigmoid_q7
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Get_Data
</UL>

<P><STRONG><a name="[30f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[214]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[310]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[311]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[217]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[21b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[21a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[21e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[22b]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[313]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[221]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[314]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[76]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[315]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[316]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[224]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[317]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[318]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[319]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b9]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reg_dump
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Print_Buffer
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64_Wirte_Protect_Disable
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_get_output
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cyberry_Potter_System_Status_Update
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module3_Mode1_Handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module3_Mode0_Handler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Receive
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Transmit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_model_version
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run_to
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_run
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tailed_activation
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_analysis_result
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_malloc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_memory_block_info
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_layer_info
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_block
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_add
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_IR_RF_Print
</UL>

<P><STRONG><a name="[234]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[226]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[227]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[228]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[229]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[22a]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[22c]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[31a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[31b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[31c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[232]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[15a]"></a>pow</STRONG> (Thumb, 2532 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
</UL>

<P><STRONG><a name="[15d]"></a>round</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
</UL>

<P><STRONG><a name="[233]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7b]"></a>__NNOM_SSAT</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_multiple_sub_q7
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_multiple_mult_q7
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_multiple_add_q7
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_sub_q7
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_add_q7
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_mult_q7
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_softmax_q7
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_fully_connected_q7
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_fully_connected_q7_opt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_dot_q7
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_dot_q7_opt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_depthwise_separable_conv_CHW_q7_nonsquare
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_depthwise_separable_conv_HWC_q7_nonsquare
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_conv_trans_HWC_q7_nonsquare
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_CHW_q7_nonsquare
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q7_nonsquare
</UL>

<P><STRONG><a name="[7e]"></a>alg_deconv2d_calculate_position</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, nnom_local.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_conv_trans_HWC_q7_nonsquare
</UL>

<P><STRONG><a name="[8b]"></a>__NNOM_USAT</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nnom_local.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NNOM_USAT
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_softmax_q7
</UL>

<P><STRONG><a name="[98]"></a>__NNOM_SSAT</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, nnom_local_q15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_multiple_sub_q15
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_multiple_mult_q15
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_multiple_add_q15
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_sub_q15
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_add_q15
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_mult_q15
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_softmax_q15
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_fully_connected_mat_q7_vec_q15
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_fully_connected_mat_q7_vec_q15_opt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_dot_q15_opt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_dot_q15
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_depthwise_separable_conv_CHW_q15_nonsquare
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_depthwise_separable_conv_HWC_q15_nonsquare
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_conv_trans_HWC_q15_nonsquare
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_CHW_q15_nonsquare
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q15_nonsquare
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_sumpool_q15_CHW
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_sumpool_q15_HWC
</UL>

<P><STRONG><a name="[9f]"></a>alg_deconv2d_calculate_position</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_conv_trans_HWC_q15_nonsquare
</UL>

<P><STRONG><a name="[ab]"></a>__NNOM_USAT</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nnom_local_q15.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_softmax_q15
</UL>

<P><STRONG><a name="[af]"></a>local_activation_q15</STRONG> (Thumb, 218 bytes, Stack size 52 bytes, nnom_local_q15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = local_activation_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_tanh_q15
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_sigmoid_q15
</UL>

<P><STRONG><a name="[36]"></a>model_add</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = model_add &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>model_hook</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = model_hook &rArr; allocate_hook &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_io
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_mergex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>model_merge</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = model_merge &rArr; model_mergex &rArr; model_hook &rArr; allocate_hook &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_mergex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>model_mergex</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = model_mergex &rArr; model_hook &rArr; allocate_hook &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_merge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>model_active</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = model_active
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>find_last</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_last
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sequencial_compile
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_add
</UL>

<P><STRONG><a name="[be]"></a>allocate_hook</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = allocate_hook &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_hook
</UL>

<P><STRONG><a name="[bf]"></a>allocate_io</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = allocate_io &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_hook
</UL>

<P><STRONG><a name="[c1]"></a>layer_delete</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nnom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_free
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_list_delete
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tensor_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delete
</UL>

<P><STRONG><a name="[c3]"></a>io_tensor_delete</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nnom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_delete
</UL>

<P><STRONG><a name="[c4]"></a>io_list_delete</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nnom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_delete
</UL>

<P><STRONG><a name="[c6]"></a>allocate_block</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = allocate_block &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[c8]"></a>layer_shortcut_add</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = layer_shortcut_add
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[c9]"></a>print_layer_info</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = print_layer_info &rArr; io_mem_size &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_mem_size
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[ca]"></a>print_memory_block_info</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = print_memory_block_info &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[cb]"></a>release_comp_mem</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = release_comp_mem &rArr; release_block
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_block
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[cc]"></a>release_input_mem</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = release_input_mem &rArr; release_block
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_block
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[ce]"></a>io_mem_size</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = io_mem_size &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_layer_info
</UL>

<P><STRONG><a name="[cf]"></a>release_block</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = release_block
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_input_mem
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_comp_mem
</UL>

<P><STRONG><a name="[d5]"></a>model_set_ops</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nnom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = model_set_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[3e]"></a>relu_run</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nnom_activation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = relu_run &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_relu_q15
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_relu_q7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_activation.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>leaky_relu_run</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nnom_activation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = leaky_relu_run &rArr; local_leaky_relu_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_leaky_relu_q15
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_leaky_relu_q7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_activation.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>adv_relu_run</STRONG> (Thumb, 636 bytes, Stack size 112 bytes, nnom_activation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adv_relu_run &rArr; local_adv_relu_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_adv_relu_q15
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_adv_relu_q7
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_activation.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>sigmoid_run</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, nnom_activation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sigmoid_run &rArr; local_sigmoid_q15 &rArr; local_activation_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_sigmoid_q15
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_sigmoid_q7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_activation.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>tanh_run</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, nnom_activation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = tanh_run &rArr; local_tanh_q15 &rArr; local_activation_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_tanh_q15
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_tanh_q7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_activation.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>hard_tanh_run</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nnom_activation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hard_tanh_run &rArr; local_hard_tanh_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_hard_tanh_q15
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_hard_tanh_q7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_activation.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>hard_sigmoid_run</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nnom_activation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = hard_sigmoid_run &rArr; local_hard_sigmoid_q15 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_hard_sigmoid_q15
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_hard_sigmoid_q7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_activation.o(.text)
</UL>
<P><STRONG><a name="[13f]"></a>IIC1_Start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, IIC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC1_Start &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SCL
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>

<P><STRONG><a name="[140]"></a>IIC1_Send_Byte</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, IIC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC1_Send_Byte &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SCL
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>

<P><STRONG><a name="[141]"></a>IIC1_Receive_Ack</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, IIC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC1_Receive_Ack &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_R_SDA
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SCL
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>

<P><STRONG><a name="[142]"></a>IIC1_Stop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, IIC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SCL
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>

<P><STRONG><a name="[143]"></a>IIC1_W_SDA</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, IIC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC1_W_SDA &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Send_Ack
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Receive_Byte
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Receive_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Start
</UL>

<P><STRONG><a name="[144]"></a>IIC1_W_SCL</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, IIC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Send_Ack
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Receive_Byte
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Receive_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Start
</UL>

<P><STRONG><a name="[145]"></a>IIC1_R_SDA</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, IIC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC1_R_SDA &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Receive_Byte
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Receive_Ack
</UL>

<P><STRONG><a name="[147]"></a>IIC1_Receive_Byte</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, IIC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC1_Receive_Byte &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_R_SDA
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SCL
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
</UL>

<P><STRONG><a name="[148]"></a>IIC1_Send_Ack</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, IIC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC1_Send_Ack &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SCL
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_W_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
</UL>

<P><STRONG><a name="[14a]"></a>IIC2_Start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, IIC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SCL
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_write
</UL>

<P><STRONG><a name="[14b]"></a>IIC2_Send_Byte</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, IIC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SCL
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_write
</UL>

<P><STRONG><a name="[14c]"></a>IIC2_Receive_Ack</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, IIC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_R_SDA
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SCL
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_write
</UL>

<P><STRONG><a name="[14d]"></a>IIC2_Stop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, IIC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SCL
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_write
</UL>

<P><STRONG><a name="[14e]"></a>IIC2_W_SDA</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, IIC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Send_Ack
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Receive_Byte
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Stop
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Receive_Ack
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Send_Byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Start
</UL>

<P><STRONG><a name="[14f]"></a>IIC2_W_SCL</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, IIC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Send_Ack
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Receive_Byte
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Stop
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Receive_Ack
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Send_Byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Start
</UL>

<P><STRONG><a name="[150]"></a>IIC2_R_SDA</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, IIC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Receive_Byte
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Receive_Ack
</UL>

<P><STRONG><a name="[152]"></a>IIC2_Receive_Byte</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, IIC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_R_SDA
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SCL
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_read
</UL>

<P><STRONG><a name="[153]"></a>IIC2_Send_Ack</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, IIC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SCL
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_W_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_read
</UL>

<P><STRONG><a name="[161]"></a>nnom_model_create</STRONG> (Thumb, 318 bytes, Stack size 96 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nnom_model_create &rArr; output_s &rArr; input_s &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_s
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_s
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_s
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_leaky_relu
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_model_version
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, MPU6050.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[16d]"></a>inv_orientation_matrix_to_scalar</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, MPU6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_orientation_matrix_to_scalar &rArr; inv_row_2_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_row_2_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[171]"></a>run_self_test</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, MPU6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; mpu_reset_fifo &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_sens
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[176]"></a>inv_row_2_scale</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, MPU6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_row_2_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>

<P><STRONG><a name="[18b]"></a>set_int_enable</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = set_int_enable &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[1a2]"></a>get_st_biases</STRONG> (Thumb, 1340 bytes, Stack size 88 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = get_st_biases &rArr; IIC1_write &rArr; IIC1_Stop &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_write
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[1a3]"></a>accel_self_test</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = accel_self_test &rArr; get_accel_prod_shift &rArr; IIC1_read &rArr; IIC1_Send_Ack &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[1a4]"></a>gyro_self_test</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = gyro_self_test &rArr; IIC1_read &rArr; IIC1_Send_Ack &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[1a5]"></a>get_accel_prod_shift</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, inv_mpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = get_accel_prod_shift &rArr; IIC1_read &rArr; IIC1_Send_Ack &rArr; IIC1_W_SCL &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_read
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[1c0]"></a>decode_gesture</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[1df]"></a>ADC_PB1_GetValue</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ADC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_PB1_GetValue &rArr; ADC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PB1_GetAvg
</UL>

<P><STRONG><a name="[1f5]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f6]"></a>SetSysClockTo72</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[202]"></a>TI1_Config</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[204]"></a>TI2_Config</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[206]"></a>TI3_Config</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[208]"></a>TI4_Config</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[22d]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[225]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[230]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
